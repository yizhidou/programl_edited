// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: program_graph.proto

#include "program_graph.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace programl {
PROTOBUF_CONSTEXPR ProgramGraph::ProgramGraph(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.node_)*/{}
  , /*decltype(_impl_.edge_)*/{}
  , /*decltype(_impl_.function_)*/{}
  , /*decltype(_impl_.module_)*/{}
  , /*decltype(_impl_.features_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProgramGraphDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProgramGraphDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProgramGraphDefaultTypeInternal() {}
  union {
    ProgramGraph _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProgramGraphDefaultTypeInternal _ProgramGraph_default_instance_;
PROTOBUF_CONSTEXPR Node::Node(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.features_)*/nullptr
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.function_)*/0
  , /*decltype(_impl_.block_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NodeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NodeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NodeDefaultTypeInternal() {}
  union {
    Node _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NodeDefaultTypeInternal _Node_default_instance_;
PROTOBUF_CONSTEXPR Edge::Edge(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.features_)*/nullptr
  , /*decltype(_impl_.flow_)*/0
  , /*decltype(_impl_.position_)*/0
  , /*decltype(_impl_.source_)*/0
  , /*decltype(_impl_.target_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EdgeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EdgeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EdgeDefaultTypeInternal() {}
  union {
    Edge _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EdgeDefaultTypeInternal _Edge_default_instance_;
PROTOBUF_CONSTEXPR Function::Function(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.features_)*/nullptr
  , /*decltype(_impl_.module_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FunctionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FunctionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FunctionDefaultTypeInternal() {}
  union {
    Function _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FunctionDefaultTypeInternal _Function_default_instance_;
PROTOBUF_CONSTEXPR Module::Module(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.features_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ModuleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ModuleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ModuleDefaultTypeInternal() {}
  union {
    Module _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ModuleDefaultTypeInternal _Module_default_instance_;
}  // namespace programl
static ::_pb::Metadata file_level_metadata_program_5fgraph_2eproto[5];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_program_5fgraph_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_program_5fgraph_2eproto = nullptr;

const uint32_t TableStruct_program_5fgraph_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::programl::ProgramGraph, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::programl::ProgramGraph, _impl_.node_),
  PROTOBUF_FIELD_OFFSET(::programl::ProgramGraph, _impl_.edge_),
  PROTOBUF_FIELD_OFFSET(::programl::ProgramGraph, _impl_.function_),
  PROTOBUF_FIELD_OFFSET(::programl::ProgramGraph, _impl_.module_),
  PROTOBUF_FIELD_OFFSET(::programl::ProgramGraph, _impl_.features_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::programl::Node, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::programl::Node, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::programl::Node, _impl_.text_),
  PROTOBUF_FIELD_OFFSET(::programl::Node, _impl_.function_),
  PROTOBUF_FIELD_OFFSET(::programl::Node, _impl_.block_),
  PROTOBUF_FIELD_OFFSET(::programl::Node, _impl_.features_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::programl::Edge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::programl::Edge, _impl_.flow_),
  PROTOBUF_FIELD_OFFSET(::programl::Edge, _impl_.position_),
  PROTOBUF_FIELD_OFFSET(::programl::Edge, _impl_.source_),
  PROTOBUF_FIELD_OFFSET(::programl::Edge, _impl_.target_),
  PROTOBUF_FIELD_OFFSET(::programl::Edge, _impl_.features_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::programl::Function, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::programl::Function, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::programl::Function, _impl_.module_),
  PROTOBUF_FIELD_OFFSET(::programl::Function, _impl_.features_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::programl::Module, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::programl::Module, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::programl::Module, _impl_.features_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::programl::ProgramGraph)},
  { 11, -1, -1, sizeof(::programl::Node)},
  { 22, -1, -1, sizeof(::programl::Edge)},
  { 33, -1, -1, sizeof(::programl::Function)},
  { 42, -1, -1, sizeof(::programl::Module)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::programl::_ProgramGraph_default_instance_._instance,
  &::programl::_Node_default_instance_._instance,
  &::programl::_Edge_default_instance_._instance,
  &::programl::_Function_default_instance_._instance,
  &::programl::_Module_default_instance_._instance,
};

const char descriptor_table_protodef_program_5fgraph_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023program_graph.proto\022\010programl\032\016feature"
  "s.proto\"\270\001\n\014ProgramGraph\022\034\n\004node\030\001 \003(\0132\016"
  ".programl.Node\022\034\n\004edge\030\002 \003(\0132\016.programl."
  "Edge\022$\n\010function\030\004 \003(\0132\022.programl.Functi"
  "on\022 \n\006module\030\005 \003(\0132\020.programl.Module\022$\n\010"
  "features\030\006 \001(\0132\022.programl.Features\"\275\001\n\004N"
  "ode\022!\n\004type\030\001 \001(\0162\023.programl.Node.Type\022\014"
  "\n\004text\030\002 \001(\t\022\020\n\010function\030\004 \001(\005\022\r\n\005block\030"
  "\007 \001(\005\022$\n\010features\030\010 \001(\0132\022.programl.Featu"
  "res\"=\n\004Type\022\017\n\013INSTRUCTION\020\000\022\014\n\010VARIABLE"
  "\020\001\022\014\n\010CONSTANT\020\002\022\010\n\004TYPE\020\003\"\264\001\n\004Edge\022!\n\004f"
  "low\030\001 \001(\0162\023.programl.Edge.Flow\022\020\n\010positi"
  "on\030\002 \001(\005\022\016\n\006source\030\003 \001(\005\022\016\n\006target\030\004 \001(\005"
  "\022$\n\010features\030\005 \001(\0132\022.programl.Features\"1"
  "\n\004Flow\022\013\n\007CONTROL\020\000\022\010\n\004DATA\020\001\022\010\n\004CALL\020\002\022"
  "\010\n\004TYPE\020\003\"N\n\010Function\022\014\n\004name\030\001 \001(\t\022\016\n\006m"
  "odule\030\002 \001(\005\022$\n\010features\030\003 \001(\0132\022.programl"
  ".Features\"<\n\006Module\022\014\n\004name\030\001 \001(\t\022$\n\010fea"
  "tures\030\002 \001(\0132\022.programl.FeaturesB/\n\014com.p"
  "rogramlB\021ProgramGraphProtoP\001Z\nprogramlpb"
  "b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_program_5fgraph_2eproto_deps[1] = {
  &::descriptor_table_features_2eproto,
};
static ::_pbi::once_flag descriptor_table_program_5fgraph_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_program_5fgraph_2eproto = {
    false, false, 808, descriptor_table_protodef_program_5fgraph_2eproto,
    "program_graph.proto",
    &descriptor_table_program_5fgraph_2eproto_once, descriptor_table_program_5fgraph_2eproto_deps, 1, 5,
    schemas, file_default_instances, TableStruct_program_5fgraph_2eproto::offsets,
    file_level_metadata_program_5fgraph_2eproto, file_level_enum_descriptors_program_5fgraph_2eproto,
    file_level_service_descriptors_program_5fgraph_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_program_5fgraph_2eproto_getter() {
  return &descriptor_table_program_5fgraph_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_program_5fgraph_2eproto(&descriptor_table_program_5fgraph_2eproto);
namespace programl {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Node_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_program_5fgraph_2eproto);
  return file_level_enum_descriptors_program_5fgraph_2eproto[0];
}
bool Node_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Node_Type Node::INSTRUCTION;
constexpr Node_Type Node::VARIABLE;
constexpr Node_Type Node::CONSTANT;
constexpr Node_Type Node::TYPE;
constexpr Node_Type Node::Type_MIN;
constexpr Node_Type Node::Type_MAX;
constexpr int Node::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Edge_Flow_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_program_5fgraph_2eproto);
  return file_level_enum_descriptors_program_5fgraph_2eproto[1];
}
bool Edge_Flow_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Edge_Flow Edge::CONTROL;
constexpr Edge_Flow Edge::DATA;
constexpr Edge_Flow Edge::CALL;
constexpr Edge_Flow Edge::TYPE;
constexpr Edge_Flow Edge::Flow_MIN;
constexpr Edge_Flow Edge::Flow_MAX;
constexpr int Edge::Flow_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class ProgramGraph::_Internal {
 public:
  static const ::programl::Features& features(const ProgramGraph* msg);
};

const ::programl::Features&
ProgramGraph::_Internal::features(const ProgramGraph* msg) {
  return *msg->_impl_.features_;
}
void ProgramGraph::clear_features() {
  if (GetArenaForAllocation() == nullptr && _impl_.features_ != nullptr) {
    delete _impl_.features_;
  }
  _impl_.features_ = nullptr;
}
ProgramGraph::ProgramGraph(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:programl.ProgramGraph)
}
ProgramGraph::ProgramGraph(const ProgramGraph& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProgramGraph* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.node_){from._impl_.node_}
    , decltype(_impl_.edge_){from._impl_.edge_}
    , decltype(_impl_.function_){from._impl_.function_}
    , decltype(_impl_.module_){from._impl_.module_}
    , decltype(_impl_.features_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_features()) {
    _this->_impl_.features_ = new ::programl::Features(*from._impl_.features_);
  }
  // @@protoc_insertion_point(copy_constructor:programl.ProgramGraph)
}

inline void ProgramGraph::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.node_){arena}
    , decltype(_impl_.edge_){arena}
    , decltype(_impl_.function_){arena}
    , decltype(_impl_.module_){arena}
    , decltype(_impl_.features_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ProgramGraph::~ProgramGraph() {
  // @@protoc_insertion_point(destructor:programl.ProgramGraph)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProgramGraph::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.node_.~RepeatedPtrField();
  _impl_.edge_.~RepeatedPtrField();
  _impl_.function_.~RepeatedPtrField();
  _impl_.module_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.features_;
}

void ProgramGraph::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProgramGraph::Clear() {
// @@protoc_insertion_point(message_clear_start:programl.ProgramGraph)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.node_.Clear();
  _impl_.edge_.Clear();
  _impl_.function_.Clear();
  _impl_.module_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.features_ != nullptr) {
    delete _impl_.features_;
  }
  _impl_.features_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProgramGraph::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .programl.Node node = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_node(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .programl.Edge edge = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_edge(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .programl.Function function = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_function(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .programl.Module module = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_module(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .programl.Features features = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_features(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProgramGraph::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:programl.ProgramGraph)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .programl.Node node = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_node_size()); i < n; i++) {
    const auto& repfield = this->_internal_node(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .programl.Edge edge = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_edge_size()); i < n; i++) {
    const auto& repfield = this->_internal_edge(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .programl.Function function = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_function_size()); i < n; i++) {
    const auto& repfield = this->_internal_function(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .programl.Module module = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_module_size()); i < n; i++) {
    const auto& repfield = this->_internal_module(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .programl.Features features = 6;
  if (this->_internal_has_features()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::features(this),
        _Internal::features(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:programl.ProgramGraph)
  return target;
}

size_t ProgramGraph::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:programl.ProgramGraph)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .programl.Node node = 1;
  total_size += 1UL * this->_internal_node_size();
  for (const auto& msg : this->_impl_.node_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .programl.Edge edge = 2;
  total_size += 1UL * this->_internal_edge_size();
  for (const auto& msg : this->_impl_.edge_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .programl.Function function = 4;
  total_size += 1UL * this->_internal_function_size();
  for (const auto& msg : this->_impl_.function_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .programl.Module module = 5;
  total_size += 1UL * this->_internal_module_size();
  for (const auto& msg : this->_impl_.module_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .programl.Features features = 6;
  if (this->_internal_has_features()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.features_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProgramGraph::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProgramGraph::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProgramGraph::GetClassData() const { return &_class_data_; }


void ProgramGraph::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProgramGraph*>(&to_msg);
  auto& from = static_cast<const ProgramGraph&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:programl.ProgramGraph)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.node_.MergeFrom(from._impl_.node_);
  _this->_impl_.edge_.MergeFrom(from._impl_.edge_);
  _this->_impl_.function_.MergeFrom(from._impl_.function_);
  _this->_impl_.module_.MergeFrom(from._impl_.module_);
  if (from._internal_has_features()) {
    _this->_internal_mutable_features()->::programl::Features::MergeFrom(
        from._internal_features());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProgramGraph::CopyFrom(const ProgramGraph& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:programl.ProgramGraph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProgramGraph::IsInitialized() const {
  return true;
}

void ProgramGraph::InternalSwap(ProgramGraph* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.node_.InternalSwap(&other->_impl_.node_);
  _impl_.edge_.InternalSwap(&other->_impl_.edge_);
  _impl_.function_.InternalSwap(&other->_impl_.function_);
  _impl_.module_.InternalSwap(&other->_impl_.module_);
  swap(_impl_.features_, other->_impl_.features_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProgramGraph::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_program_5fgraph_2eproto_getter, &descriptor_table_program_5fgraph_2eproto_once,
      file_level_metadata_program_5fgraph_2eproto[0]);
}

// ===================================================================

class Node::_Internal {
 public:
  static const ::programl::Features& features(const Node* msg);
};

const ::programl::Features&
Node::_Internal::features(const Node* msg) {
  return *msg->_impl_.features_;
}
void Node::clear_features() {
  if (GetArenaForAllocation() == nullptr && _impl_.features_ != nullptr) {
    delete _impl_.features_;
  }
  _impl_.features_ = nullptr;
}
Node::Node(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:programl.Node)
}
Node::Node(const Node& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Node* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.text_){}
    , decltype(_impl_.features_){nullptr}
    , decltype(_impl_.type_){}
    , decltype(_impl_.function_){}
    , decltype(_impl_.block_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_text().empty()) {
    _this->_impl_.text_.Set(from._internal_text(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_features()) {
    _this->_impl_.features_ = new ::programl::Features(*from._impl_.features_);
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.block_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.block_));
  // @@protoc_insertion_point(copy_constructor:programl.Node)
}

inline void Node::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.text_){}
    , decltype(_impl_.features_){nullptr}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.function_){0}
    , decltype(_impl_.block_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Node::~Node() {
  // @@protoc_insertion_point(destructor:programl.Node)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Node::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.text_.Destroy();
  if (this != internal_default_instance()) delete _impl_.features_;
}

void Node::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Node::Clear() {
// @@protoc_insertion_point(message_clear_start:programl.Node)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.text_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.features_ != nullptr) {
    delete _impl_.features_;
  }
  _impl_.features_ = nullptr;
  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.block_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.block_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Node::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .programl.Node.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::programl::Node_Type>(val));
        } else
          goto handle_unusual;
        continue;
      // string text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "programl.Node.text"));
        } else
          goto handle_unusual;
        continue;
      // int32 function = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.function_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 block = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.block_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .programl.Features features = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_features(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Node::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:programl.Node)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .programl.Node.Type type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // string text = 2;
  if (!this->_internal_text().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "programl.Node.text");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_text(), target);
  }

  // int32 function = 4;
  if (this->_internal_function() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_function(), target);
  }

  // int32 block = 7;
  if (this->_internal_block() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_block(), target);
  }

  // .programl.Features features = 8;
  if (this->_internal_has_features()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::features(this),
        _Internal::features(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:programl.Node)
  return target;
}

size_t Node::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:programl.Node)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string text = 2;
  if (!this->_internal_text().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  // .programl.Features features = 8;
  if (this->_internal_has_features()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.features_);
  }

  // .programl.Node.Type type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // int32 function = 4;
  if (this->_internal_function() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_function());
  }

  // int32 block = 7;
  if (this->_internal_block() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_block());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Node::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Node::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Node::GetClassData() const { return &_class_data_; }


void Node::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Node*>(&to_msg);
  auto& from = static_cast<const Node&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:programl.Node)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_text().empty()) {
    _this->_internal_set_text(from._internal_text());
  }
  if (from._internal_has_features()) {
    _this->_internal_mutable_features()->::programl::Features::MergeFrom(
        from._internal_features());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_function() != 0) {
    _this->_internal_set_function(from._internal_function());
  }
  if (from._internal_block() != 0) {
    _this->_internal_set_block(from._internal_block());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Node::CopyFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:programl.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Node::IsInitialized() const {
  return true;
}

void Node::InternalSwap(Node* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.text_, lhs_arena,
      &other->_impl_.text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Node, _impl_.block_)
      + sizeof(Node::_impl_.block_)
      - PROTOBUF_FIELD_OFFSET(Node, _impl_.features_)>(
          reinterpret_cast<char*>(&_impl_.features_),
          reinterpret_cast<char*>(&other->_impl_.features_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Node::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_program_5fgraph_2eproto_getter, &descriptor_table_program_5fgraph_2eproto_once,
      file_level_metadata_program_5fgraph_2eproto[1]);
}

// ===================================================================

class Edge::_Internal {
 public:
  static const ::programl::Features& features(const Edge* msg);
};

const ::programl::Features&
Edge::_Internal::features(const Edge* msg) {
  return *msg->_impl_.features_;
}
void Edge::clear_features() {
  if (GetArenaForAllocation() == nullptr && _impl_.features_ != nullptr) {
    delete _impl_.features_;
  }
  _impl_.features_ = nullptr;
}
Edge::Edge(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:programl.Edge)
}
Edge::Edge(const Edge& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Edge* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.features_){nullptr}
    , decltype(_impl_.flow_){}
    , decltype(_impl_.position_){}
    , decltype(_impl_.source_){}
    , decltype(_impl_.target_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_features()) {
    _this->_impl_.features_ = new ::programl::Features(*from._impl_.features_);
  }
  ::memcpy(&_impl_.flow_, &from._impl_.flow_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.target_) -
    reinterpret_cast<char*>(&_impl_.flow_)) + sizeof(_impl_.target_));
  // @@protoc_insertion_point(copy_constructor:programl.Edge)
}

inline void Edge::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.features_){nullptr}
    , decltype(_impl_.flow_){0}
    , decltype(_impl_.position_){0}
    , decltype(_impl_.source_){0}
    , decltype(_impl_.target_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Edge::~Edge() {
  // @@protoc_insertion_point(destructor:programl.Edge)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Edge::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.features_;
}

void Edge::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Edge::Clear() {
// @@protoc_insertion_point(message_clear_start:programl.Edge)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.features_ != nullptr) {
    delete _impl_.features_;
  }
  _impl_.features_ = nullptr;
  ::memset(&_impl_.flow_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.target_) -
      reinterpret_cast<char*>(&_impl_.flow_)) + sizeof(_impl_.target_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Edge::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .programl.Edge.Flow flow = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_flow(static_cast<::programl::Edge_Flow>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 source = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.source_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 target = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.target_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .programl.Features features = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_features(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Edge::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:programl.Edge)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .programl.Edge.Flow flow = 1;
  if (this->_internal_flow() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_flow(), target);
  }

  // int32 position = 2;
  if (this->_internal_position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_position(), target);
  }

  // int32 source = 3;
  if (this->_internal_source() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_source(), target);
  }

  // int32 target = 4;
  if (this->_internal_target() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_target(), target);
  }

  // .programl.Features features = 5;
  if (this->_internal_has_features()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::features(this),
        _Internal::features(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:programl.Edge)
  return target;
}

size_t Edge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:programl.Edge)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .programl.Features features = 5;
  if (this->_internal_has_features()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.features_);
  }

  // .programl.Edge.Flow flow = 1;
  if (this->_internal_flow() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_flow());
  }

  // int32 position = 2;
  if (this->_internal_position() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_position());
  }

  // int32 source = 3;
  if (this->_internal_source() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_source());
  }

  // int32 target = 4;
  if (this->_internal_target() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_target());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Edge::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Edge::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Edge::GetClassData() const { return &_class_data_; }


void Edge::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Edge*>(&to_msg);
  auto& from = static_cast<const Edge&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:programl.Edge)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_features()) {
    _this->_internal_mutable_features()->::programl::Features::MergeFrom(
        from._internal_features());
  }
  if (from._internal_flow() != 0) {
    _this->_internal_set_flow(from._internal_flow());
  }
  if (from._internal_position() != 0) {
    _this->_internal_set_position(from._internal_position());
  }
  if (from._internal_source() != 0) {
    _this->_internal_set_source(from._internal_source());
  }
  if (from._internal_target() != 0) {
    _this->_internal_set_target(from._internal_target());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Edge::CopyFrom(const Edge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:programl.Edge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Edge::IsInitialized() const {
  return true;
}

void Edge::InternalSwap(Edge* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Edge, _impl_.target_)
      + sizeof(Edge::_impl_.target_)
      - PROTOBUF_FIELD_OFFSET(Edge, _impl_.features_)>(
          reinterpret_cast<char*>(&_impl_.features_),
          reinterpret_cast<char*>(&other->_impl_.features_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Edge::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_program_5fgraph_2eproto_getter, &descriptor_table_program_5fgraph_2eproto_once,
      file_level_metadata_program_5fgraph_2eproto[2]);
}

// ===================================================================

class Function::_Internal {
 public:
  static const ::programl::Features& features(const Function* msg);
};

const ::programl::Features&
Function::_Internal::features(const Function* msg) {
  return *msg->_impl_.features_;
}
void Function::clear_features() {
  if (GetArenaForAllocation() == nullptr && _impl_.features_ != nullptr) {
    delete _impl_.features_;
  }
  _impl_.features_ = nullptr;
}
Function::Function(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:programl.Function)
}
Function::Function(const Function& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Function* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.features_){nullptr}
    , decltype(_impl_.module_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_features()) {
    _this->_impl_.features_ = new ::programl::Features(*from._impl_.features_);
  }
  _this->_impl_.module_ = from._impl_.module_;
  // @@protoc_insertion_point(copy_constructor:programl.Function)
}

inline void Function::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.features_){nullptr}
    , decltype(_impl_.module_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Function::~Function() {
  // @@protoc_insertion_point(destructor:programl.Function)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Function::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.features_;
}

void Function::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Function::Clear() {
// @@protoc_insertion_point(message_clear_start:programl.Function)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.features_ != nullptr) {
    delete _impl_.features_;
  }
  _impl_.features_ = nullptr;
  _impl_.module_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Function::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "programl.Function.name"));
        } else
          goto handle_unusual;
        continue;
      // int32 module = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.module_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .programl.Features features = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_features(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Function::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:programl.Function)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "programl.Function.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // int32 module = 2;
  if (this->_internal_module() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_module(), target);
  }

  // .programl.Features features = 3;
  if (this->_internal_has_features()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::features(this),
        _Internal::features(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:programl.Function)
  return target;
}

size_t Function::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:programl.Function)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .programl.Features features = 3;
  if (this->_internal_has_features()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.features_);
  }

  // int32 module = 2;
  if (this->_internal_module() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_module());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Function::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Function::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Function::GetClassData() const { return &_class_data_; }


void Function::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Function*>(&to_msg);
  auto& from = static_cast<const Function&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:programl.Function)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_has_features()) {
    _this->_internal_mutable_features()->::programl::Features::MergeFrom(
        from._internal_features());
  }
  if (from._internal_module() != 0) {
    _this->_internal_set_module(from._internal_module());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Function::CopyFrom(const Function& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:programl.Function)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Function::IsInitialized() const {
  return true;
}

void Function::InternalSwap(Function* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Function, _impl_.module_)
      + sizeof(Function::_impl_.module_)
      - PROTOBUF_FIELD_OFFSET(Function, _impl_.features_)>(
          reinterpret_cast<char*>(&_impl_.features_),
          reinterpret_cast<char*>(&other->_impl_.features_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Function::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_program_5fgraph_2eproto_getter, &descriptor_table_program_5fgraph_2eproto_once,
      file_level_metadata_program_5fgraph_2eproto[3]);
}

// ===================================================================

class Module::_Internal {
 public:
  static const ::programl::Features& features(const Module* msg);
};

const ::programl::Features&
Module::_Internal::features(const Module* msg) {
  return *msg->_impl_.features_;
}
void Module::clear_features() {
  if (GetArenaForAllocation() == nullptr && _impl_.features_ != nullptr) {
    delete _impl_.features_;
  }
  _impl_.features_ = nullptr;
}
Module::Module(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:programl.Module)
}
Module::Module(const Module& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Module* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.features_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_features()) {
    _this->_impl_.features_ = new ::programl::Features(*from._impl_.features_);
  }
  // @@protoc_insertion_point(copy_constructor:programl.Module)
}

inline void Module::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.features_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Module::~Module() {
  // @@protoc_insertion_point(destructor:programl.Module)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Module::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.features_;
}

void Module::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Module::Clear() {
// @@protoc_insertion_point(message_clear_start:programl.Module)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.features_ != nullptr) {
    delete _impl_.features_;
  }
  _impl_.features_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Module::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "programl.Module.name"));
        } else
          goto handle_unusual;
        continue;
      // .programl.Features features = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_features(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Module::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:programl.Module)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "programl.Module.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .programl.Features features = 2;
  if (this->_internal_has_features()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::features(this),
        _Internal::features(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:programl.Module)
  return target;
}

size_t Module::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:programl.Module)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .programl.Features features = 2;
  if (this->_internal_has_features()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.features_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Module::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Module::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Module::GetClassData() const { return &_class_data_; }


void Module::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Module*>(&to_msg);
  auto& from = static_cast<const Module&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:programl.Module)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_has_features()) {
    _this->_internal_mutable_features()->::programl::Features::MergeFrom(
        from._internal_features());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Module::CopyFrom(const Module& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:programl.Module)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Module::IsInitialized() const {
  return true;
}

void Module::InternalSwap(Module* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.features_, other->_impl_.features_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Module::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_program_5fgraph_2eproto_getter, &descriptor_table_program_5fgraph_2eproto_once,
      file_level_metadata_program_5fgraph_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace programl
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::programl::ProgramGraph*
Arena::CreateMaybeMessage< ::programl::ProgramGraph >(Arena* arena) {
  return Arena::CreateMessageInternal< ::programl::ProgramGraph >(arena);
}
template<> PROTOBUF_NOINLINE ::programl::Node*
Arena::CreateMaybeMessage< ::programl::Node >(Arena* arena) {
  return Arena::CreateMessageInternal< ::programl::Node >(arena);
}
template<> PROTOBUF_NOINLINE ::programl::Edge*
Arena::CreateMaybeMessage< ::programl::Edge >(Arena* arena) {
  return Arena::CreateMessageInternal< ::programl::Edge >(arena);
}
template<> PROTOBUF_NOINLINE ::programl::Function*
Arena::CreateMaybeMessage< ::programl::Function >(Arena* arena) {
  return Arena::CreateMessageInternal< ::programl::Function >(arena);
}
template<> PROTOBUF_NOINLINE ::programl::Module*
Arena::CreateMaybeMessage< ::programl::Module >(Arena* arena) {
  return Arena::CreateMessageInternal< ::programl::Module >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
