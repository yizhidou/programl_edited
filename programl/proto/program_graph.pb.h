// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: program_graph.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_program_5fgraph_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_program_5fgraph_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "features.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_program_5fgraph_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_program_5fgraph_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_program_5fgraph_2eproto;
namespace programl {
class Edge;
struct EdgeDefaultTypeInternal;
extern EdgeDefaultTypeInternal _Edge_default_instance_;
class Function;
struct FunctionDefaultTypeInternal;
extern FunctionDefaultTypeInternal _Function_default_instance_;
class Module;
struct ModuleDefaultTypeInternal;
extern ModuleDefaultTypeInternal _Module_default_instance_;
class Node;
struct NodeDefaultTypeInternal;
extern NodeDefaultTypeInternal _Node_default_instance_;
class ProgramGraph;
struct ProgramGraphDefaultTypeInternal;
extern ProgramGraphDefaultTypeInternal _ProgramGraph_default_instance_;
}  // namespace programl
PROTOBUF_NAMESPACE_OPEN
template<> ::programl::Edge* Arena::CreateMaybeMessage<::programl::Edge>(Arena*);
template<> ::programl::Function* Arena::CreateMaybeMessage<::programl::Function>(Arena*);
template<> ::programl::Module* Arena::CreateMaybeMessage<::programl::Module>(Arena*);
template<> ::programl::Node* Arena::CreateMaybeMessage<::programl::Node>(Arena*);
template<> ::programl::ProgramGraph* Arena::CreateMaybeMessage<::programl::ProgramGraph>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace programl {

enum Node_Type : int {
  Node_Type_INSTRUCTION = 0,
  Node_Type_VARIABLE = 1,
  Node_Type_CONSTANT = 2,
  Node_Type_TYPE = 3,
  Node_Type_Node_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Node_Type_Node_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Node_Type_IsValid(int value);
constexpr Node_Type Node_Type_Type_MIN = Node_Type_INSTRUCTION;
constexpr Node_Type Node_Type_Type_MAX = Node_Type_TYPE;
constexpr int Node_Type_Type_ARRAYSIZE = Node_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Node_Type_descriptor();
template<typename T>
inline const std::string& Node_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Node_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Node_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Node_Type_descriptor(), enum_t_value);
}
inline bool Node_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Node_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Node_Type>(
    Node_Type_descriptor(), name, value);
}
enum Edge_Flow : int {
  Edge_Flow_CONTROL = 0,
  Edge_Flow_DATA = 1,
  Edge_Flow_CALL = 2,
  Edge_Flow_TYPE = 3,
  Edge_Flow_Edge_Flow_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Edge_Flow_Edge_Flow_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Edge_Flow_IsValid(int value);
constexpr Edge_Flow Edge_Flow_Flow_MIN = Edge_Flow_CONTROL;
constexpr Edge_Flow Edge_Flow_Flow_MAX = Edge_Flow_TYPE;
constexpr int Edge_Flow_Flow_ARRAYSIZE = Edge_Flow_Flow_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Edge_Flow_descriptor();
template<typename T>
inline const std::string& Edge_Flow_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Edge_Flow>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Edge_Flow_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Edge_Flow_descriptor(), enum_t_value);
}
inline bool Edge_Flow_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Edge_Flow* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Edge_Flow>(
    Edge_Flow_descriptor(), name, value);
}
// ===================================================================

class ProgramGraph final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:programl.ProgramGraph) */ {
 public:
  inline ProgramGraph() : ProgramGraph(nullptr) {}
  ~ProgramGraph() override;
  explicit PROTOBUF_CONSTEXPR ProgramGraph(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProgramGraph(const ProgramGraph& from);
  ProgramGraph(ProgramGraph&& from) noexcept
    : ProgramGraph() {
    *this = ::std::move(from);
  }

  inline ProgramGraph& operator=(const ProgramGraph& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProgramGraph& operator=(ProgramGraph&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProgramGraph& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProgramGraph* internal_default_instance() {
    return reinterpret_cast<const ProgramGraph*>(
               &_ProgramGraph_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ProgramGraph& a, ProgramGraph& b) {
    a.Swap(&b);
  }
  inline void Swap(ProgramGraph* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProgramGraph* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProgramGraph* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProgramGraph>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProgramGraph& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ProgramGraph& from) {
    ProgramGraph::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProgramGraph* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "programl.ProgramGraph";
  }
  protected:
  explicit ProgramGraph(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeFieldNumber = 1,
    kEdgeFieldNumber = 2,
    kFunctionFieldNumber = 4,
    kModuleFieldNumber = 5,
    kFeaturesFieldNumber = 6,
  };
  // repeated .programl.Node node = 1;
  int node_size() const;
  private:
  int _internal_node_size() const;
  public:
  void clear_node();
  ::programl::Node* mutable_node(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::programl::Node >*
      mutable_node();
  private:
  const ::programl::Node& _internal_node(int index) const;
  ::programl::Node* _internal_add_node();
  public:
  const ::programl::Node& node(int index) const;
  ::programl::Node* add_node();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::programl::Node >&
      node() const;

  // repeated .programl.Edge edge = 2;
  int edge_size() const;
  private:
  int _internal_edge_size() const;
  public:
  void clear_edge();
  ::programl::Edge* mutable_edge(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::programl::Edge >*
      mutable_edge();
  private:
  const ::programl::Edge& _internal_edge(int index) const;
  ::programl::Edge* _internal_add_edge();
  public:
  const ::programl::Edge& edge(int index) const;
  ::programl::Edge* add_edge();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::programl::Edge >&
      edge() const;

  // repeated .programl.Function function = 4;
  int function_size() const;
  private:
  int _internal_function_size() const;
  public:
  void clear_function();
  ::programl::Function* mutable_function(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::programl::Function >*
      mutable_function();
  private:
  const ::programl::Function& _internal_function(int index) const;
  ::programl::Function* _internal_add_function();
  public:
  const ::programl::Function& function(int index) const;
  ::programl::Function* add_function();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::programl::Function >&
      function() const;

  // repeated .programl.Module module = 5;
  int module_size() const;
  private:
  int _internal_module_size() const;
  public:
  void clear_module();
  ::programl::Module* mutable_module(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::programl::Module >*
      mutable_module();
  private:
  const ::programl::Module& _internal_module(int index) const;
  ::programl::Module* _internal_add_module();
  public:
  const ::programl::Module& module(int index) const;
  ::programl::Module* add_module();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::programl::Module >&
      module() const;

  // .programl.Features features = 6;
  bool has_features() const;
  private:
  bool _internal_has_features() const;
  public:
  void clear_features();
  const ::programl::Features& features() const;
  PROTOBUF_NODISCARD ::programl::Features* release_features();
  ::programl::Features* mutable_features();
  void set_allocated_features(::programl::Features* features);
  private:
  const ::programl::Features& _internal_features() const;
  ::programl::Features* _internal_mutable_features();
  public:
  void unsafe_arena_set_allocated_features(
      ::programl::Features* features);
  ::programl::Features* unsafe_arena_release_features();

  // @@protoc_insertion_point(class_scope:programl.ProgramGraph)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::programl::Node > node_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::programl::Edge > edge_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::programl::Function > function_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::programl::Module > module_;
    ::programl::Features* features_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_program_5fgraph_2eproto;
};
// -------------------------------------------------------------------

class Node final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:programl.Node) */ {
 public:
  inline Node() : Node(nullptr) {}
  ~Node() override;
  explicit PROTOBUF_CONSTEXPR Node(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Node(const Node& from);
  Node(Node&& from) noexcept
    : Node() {
    *this = ::std::move(from);
  }

  inline Node& operator=(const Node& from) {
    CopyFrom(from);
    return *this;
  }
  inline Node& operator=(Node&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Node& default_instance() {
    return *internal_default_instance();
  }
  static inline const Node* internal_default_instance() {
    return reinterpret_cast<const Node*>(
               &_Node_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Node& a, Node& b) {
    a.Swap(&b);
  }
  inline void Swap(Node* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Node* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Node* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Node>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Node& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Node& from) {
    Node::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Node* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "programl.Node";
  }
  protected:
  explicit Node(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Node_Type Type;
  static constexpr Type INSTRUCTION =
    Node_Type_INSTRUCTION;
  static constexpr Type VARIABLE =
    Node_Type_VARIABLE;
  static constexpr Type CONSTANT =
    Node_Type_CONSTANT;
  static constexpr Type TYPE =
    Node_Type_TYPE;
  static inline bool Type_IsValid(int value) {
    return Node_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    Node_Type_Type_MIN;
  static constexpr Type Type_MAX =
    Node_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    Node_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return Node_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return Node_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return Node_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 2,
    kFeaturesFieldNumber = 8,
    kTypeFieldNumber = 1,
    kFunctionFieldNumber = 4,
    kBlockFieldNumber = 7,
  };
  // string text = 2;
  void clear_text();
  const std::string& text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // .programl.Features features = 8;
  bool has_features() const;
  private:
  bool _internal_has_features() const;
  public:
  void clear_features();
  const ::programl::Features& features() const;
  PROTOBUF_NODISCARD ::programl::Features* release_features();
  ::programl::Features* mutable_features();
  void set_allocated_features(::programl::Features* features);
  private:
  const ::programl::Features& _internal_features() const;
  ::programl::Features* _internal_mutable_features();
  public:
  void unsafe_arena_set_allocated_features(
      ::programl::Features* features);
  ::programl::Features* unsafe_arena_release_features();

  // .programl.Node.Type type = 1;
  void clear_type();
  ::programl::Node_Type type() const;
  void set_type(::programl::Node_Type value);
  private:
  ::programl::Node_Type _internal_type() const;
  void _internal_set_type(::programl::Node_Type value);
  public:

  // int32 function = 4;
  void clear_function();
  int32_t function() const;
  void set_function(int32_t value);
  private:
  int32_t _internal_function() const;
  void _internal_set_function(int32_t value);
  public:

  // int32 block = 7;
  void clear_block();
  int32_t block() const;
  void set_block(int32_t value);
  private:
  int32_t _internal_block() const;
  void _internal_set_block(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:programl.Node)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
    ::programl::Features* features_;
    int type_;
    int32_t function_;
    int32_t block_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_program_5fgraph_2eproto;
};
// -------------------------------------------------------------------

class Edge final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:programl.Edge) */ {
 public:
  inline Edge() : Edge(nullptr) {}
  ~Edge() override;
  explicit PROTOBUF_CONSTEXPR Edge(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Edge(const Edge& from);
  Edge(Edge&& from) noexcept
    : Edge() {
    *this = ::std::move(from);
  }

  inline Edge& operator=(const Edge& from) {
    CopyFrom(from);
    return *this;
  }
  inline Edge& operator=(Edge&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Edge& default_instance() {
    return *internal_default_instance();
  }
  static inline const Edge* internal_default_instance() {
    return reinterpret_cast<const Edge*>(
               &_Edge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Edge& a, Edge& b) {
    a.Swap(&b);
  }
  inline void Swap(Edge* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Edge* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Edge* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Edge>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Edge& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Edge& from) {
    Edge::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Edge* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "programl.Edge";
  }
  protected:
  explicit Edge(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Edge_Flow Flow;
  static constexpr Flow CONTROL =
    Edge_Flow_CONTROL;
  static constexpr Flow DATA =
    Edge_Flow_DATA;
  static constexpr Flow CALL =
    Edge_Flow_CALL;
  static constexpr Flow TYPE =
    Edge_Flow_TYPE;
  static inline bool Flow_IsValid(int value) {
    return Edge_Flow_IsValid(value);
  }
  static constexpr Flow Flow_MIN =
    Edge_Flow_Flow_MIN;
  static constexpr Flow Flow_MAX =
    Edge_Flow_Flow_MAX;
  static constexpr int Flow_ARRAYSIZE =
    Edge_Flow_Flow_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Flow_descriptor() {
    return Edge_Flow_descriptor();
  }
  template<typename T>
  static inline const std::string& Flow_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Flow>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Flow_Name.");
    return Edge_Flow_Name(enum_t_value);
  }
  static inline bool Flow_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Flow* value) {
    return Edge_Flow_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kFeaturesFieldNumber = 5,
    kFlowFieldNumber = 1,
    kPositionFieldNumber = 2,
    kSourceFieldNumber = 3,
    kTargetFieldNumber = 4,
  };
  // .programl.Features features = 5;
  bool has_features() const;
  private:
  bool _internal_has_features() const;
  public:
  void clear_features();
  const ::programl::Features& features() const;
  PROTOBUF_NODISCARD ::programl::Features* release_features();
  ::programl::Features* mutable_features();
  void set_allocated_features(::programl::Features* features);
  private:
  const ::programl::Features& _internal_features() const;
  ::programl::Features* _internal_mutable_features();
  public:
  void unsafe_arena_set_allocated_features(
      ::programl::Features* features);
  ::programl::Features* unsafe_arena_release_features();

  // .programl.Edge.Flow flow = 1;
  void clear_flow();
  ::programl::Edge_Flow flow() const;
  void set_flow(::programl::Edge_Flow value);
  private:
  ::programl::Edge_Flow _internal_flow() const;
  void _internal_set_flow(::programl::Edge_Flow value);
  public:

  // int32 position = 2;
  void clear_position();
  int32_t position() const;
  void set_position(int32_t value);
  private:
  int32_t _internal_position() const;
  void _internal_set_position(int32_t value);
  public:

  // int32 source = 3;
  void clear_source();
  int32_t source() const;
  void set_source(int32_t value);
  private:
  int32_t _internal_source() const;
  void _internal_set_source(int32_t value);
  public:

  // int32 target = 4;
  void clear_target();
  int32_t target() const;
  void set_target(int32_t value);
  private:
  int32_t _internal_target() const;
  void _internal_set_target(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:programl.Edge)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::programl::Features* features_;
    int flow_;
    int32_t position_;
    int32_t source_;
    int32_t target_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_program_5fgraph_2eproto;
};
// -------------------------------------------------------------------

class Function final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:programl.Function) */ {
 public:
  inline Function() : Function(nullptr) {}
  ~Function() override;
  explicit PROTOBUF_CONSTEXPR Function(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Function(const Function& from);
  Function(Function&& from) noexcept
    : Function() {
    *this = ::std::move(from);
  }

  inline Function& operator=(const Function& from) {
    CopyFrom(from);
    return *this;
  }
  inline Function& operator=(Function&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Function& default_instance() {
    return *internal_default_instance();
  }
  static inline const Function* internal_default_instance() {
    return reinterpret_cast<const Function*>(
               &_Function_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Function& a, Function& b) {
    a.Swap(&b);
  }
  inline void Swap(Function* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Function* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Function* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Function>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Function& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Function& from) {
    Function::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Function* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "programl.Function";
  }
  protected:
  explicit Function(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kFeaturesFieldNumber = 3,
    kModuleFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .programl.Features features = 3;
  bool has_features() const;
  private:
  bool _internal_has_features() const;
  public:
  void clear_features();
  const ::programl::Features& features() const;
  PROTOBUF_NODISCARD ::programl::Features* release_features();
  ::programl::Features* mutable_features();
  void set_allocated_features(::programl::Features* features);
  private:
  const ::programl::Features& _internal_features() const;
  ::programl::Features* _internal_mutable_features();
  public:
  void unsafe_arena_set_allocated_features(
      ::programl::Features* features);
  ::programl::Features* unsafe_arena_release_features();

  // int32 module = 2;
  void clear_module();
  int32_t module() const;
  void set_module(int32_t value);
  private:
  int32_t _internal_module() const;
  void _internal_set_module(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:programl.Function)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::programl::Features* features_;
    int32_t module_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_program_5fgraph_2eproto;
};
// -------------------------------------------------------------------

class Module final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:programl.Module) */ {
 public:
  inline Module() : Module(nullptr) {}
  ~Module() override;
  explicit PROTOBUF_CONSTEXPR Module(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Module(const Module& from);
  Module(Module&& from) noexcept
    : Module() {
    *this = ::std::move(from);
  }

  inline Module& operator=(const Module& from) {
    CopyFrom(from);
    return *this;
  }
  inline Module& operator=(Module&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Module& default_instance() {
    return *internal_default_instance();
  }
  static inline const Module* internal_default_instance() {
    return reinterpret_cast<const Module*>(
               &_Module_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Module& a, Module& b) {
    a.Swap(&b);
  }
  inline void Swap(Module* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Module* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Module* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Module>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Module& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Module& from) {
    Module::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Module* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "programl.Module";
  }
  protected:
  explicit Module(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kFeaturesFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .programl.Features features = 2;
  bool has_features() const;
  private:
  bool _internal_has_features() const;
  public:
  void clear_features();
  const ::programl::Features& features() const;
  PROTOBUF_NODISCARD ::programl::Features* release_features();
  ::programl::Features* mutable_features();
  void set_allocated_features(::programl::Features* features);
  private:
  const ::programl::Features& _internal_features() const;
  ::programl::Features* _internal_mutable_features();
  public:
  void unsafe_arena_set_allocated_features(
      ::programl::Features* features);
  ::programl::Features* unsafe_arena_release_features();

  // @@protoc_insertion_point(class_scope:programl.Module)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::programl::Features* features_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_program_5fgraph_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ProgramGraph

// repeated .programl.Node node = 1;
inline int ProgramGraph::_internal_node_size() const {
  return _impl_.node_.size();
}
inline int ProgramGraph::node_size() const {
  return _internal_node_size();
}
inline void ProgramGraph::clear_node() {
  _impl_.node_.Clear();
}
inline ::programl::Node* ProgramGraph::mutable_node(int index) {
  // @@protoc_insertion_point(field_mutable:programl.ProgramGraph.node)
  return _impl_.node_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::programl::Node >*
ProgramGraph::mutable_node() {
  // @@protoc_insertion_point(field_mutable_list:programl.ProgramGraph.node)
  return &_impl_.node_;
}
inline const ::programl::Node& ProgramGraph::_internal_node(int index) const {
  return _impl_.node_.Get(index);
}
inline const ::programl::Node& ProgramGraph::node(int index) const {
  // @@protoc_insertion_point(field_get:programl.ProgramGraph.node)
  return _internal_node(index);
}
inline ::programl::Node* ProgramGraph::_internal_add_node() {
  return _impl_.node_.Add();
}
inline ::programl::Node* ProgramGraph::add_node() {
  ::programl::Node* _add = _internal_add_node();
  // @@protoc_insertion_point(field_add:programl.ProgramGraph.node)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::programl::Node >&
ProgramGraph::node() const {
  // @@protoc_insertion_point(field_list:programl.ProgramGraph.node)
  return _impl_.node_;
}

// repeated .programl.Edge edge = 2;
inline int ProgramGraph::_internal_edge_size() const {
  return _impl_.edge_.size();
}
inline int ProgramGraph::edge_size() const {
  return _internal_edge_size();
}
inline void ProgramGraph::clear_edge() {
  _impl_.edge_.Clear();
}
inline ::programl::Edge* ProgramGraph::mutable_edge(int index) {
  // @@protoc_insertion_point(field_mutable:programl.ProgramGraph.edge)
  return _impl_.edge_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::programl::Edge >*
ProgramGraph::mutable_edge() {
  // @@protoc_insertion_point(field_mutable_list:programl.ProgramGraph.edge)
  return &_impl_.edge_;
}
inline const ::programl::Edge& ProgramGraph::_internal_edge(int index) const {
  return _impl_.edge_.Get(index);
}
inline const ::programl::Edge& ProgramGraph::edge(int index) const {
  // @@protoc_insertion_point(field_get:programl.ProgramGraph.edge)
  return _internal_edge(index);
}
inline ::programl::Edge* ProgramGraph::_internal_add_edge() {
  return _impl_.edge_.Add();
}
inline ::programl::Edge* ProgramGraph::add_edge() {
  ::programl::Edge* _add = _internal_add_edge();
  // @@protoc_insertion_point(field_add:programl.ProgramGraph.edge)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::programl::Edge >&
ProgramGraph::edge() const {
  // @@protoc_insertion_point(field_list:programl.ProgramGraph.edge)
  return _impl_.edge_;
}

// repeated .programl.Function function = 4;
inline int ProgramGraph::_internal_function_size() const {
  return _impl_.function_.size();
}
inline int ProgramGraph::function_size() const {
  return _internal_function_size();
}
inline void ProgramGraph::clear_function() {
  _impl_.function_.Clear();
}
inline ::programl::Function* ProgramGraph::mutable_function(int index) {
  // @@protoc_insertion_point(field_mutable:programl.ProgramGraph.function)
  return _impl_.function_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::programl::Function >*
ProgramGraph::mutable_function() {
  // @@protoc_insertion_point(field_mutable_list:programl.ProgramGraph.function)
  return &_impl_.function_;
}
inline const ::programl::Function& ProgramGraph::_internal_function(int index) const {
  return _impl_.function_.Get(index);
}
inline const ::programl::Function& ProgramGraph::function(int index) const {
  // @@protoc_insertion_point(field_get:programl.ProgramGraph.function)
  return _internal_function(index);
}
inline ::programl::Function* ProgramGraph::_internal_add_function() {
  return _impl_.function_.Add();
}
inline ::programl::Function* ProgramGraph::add_function() {
  ::programl::Function* _add = _internal_add_function();
  // @@protoc_insertion_point(field_add:programl.ProgramGraph.function)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::programl::Function >&
ProgramGraph::function() const {
  // @@protoc_insertion_point(field_list:programl.ProgramGraph.function)
  return _impl_.function_;
}

// repeated .programl.Module module = 5;
inline int ProgramGraph::_internal_module_size() const {
  return _impl_.module_.size();
}
inline int ProgramGraph::module_size() const {
  return _internal_module_size();
}
inline void ProgramGraph::clear_module() {
  _impl_.module_.Clear();
}
inline ::programl::Module* ProgramGraph::mutable_module(int index) {
  // @@protoc_insertion_point(field_mutable:programl.ProgramGraph.module)
  return _impl_.module_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::programl::Module >*
ProgramGraph::mutable_module() {
  // @@protoc_insertion_point(field_mutable_list:programl.ProgramGraph.module)
  return &_impl_.module_;
}
inline const ::programl::Module& ProgramGraph::_internal_module(int index) const {
  return _impl_.module_.Get(index);
}
inline const ::programl::Module& ProgramGraph::module(int index) const {
  // @@protoc_insertion_point(field_get:programl.ProgramGraph.module)
  return _internal_module(index);
}
inline ::programl::Module* ProgramGraph::_internal_add_module() {
  return _impl_.module_.Add();
}
inline ::programl::Module* ProgramGraph::add_module() {
  ::programl::Module* _add = _internal_add_module();
  // @@protoc_insertion_point(field_add:programl.ProgramGraph.module)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::programl::Module >&
ProgramGraph::module() const {
  // @@protoc_insertion_point(field_list:programl.ProgramGraph.module)
  return _impl_.module_;
}

// .programl.Features features = 6;
inline bool ProgramGraph::_internal_has_features() const {
  return this != internal_default_instance() && _impl_.features_ != nullptr;
}
inline bool ProgramGraph::has_features() const {
  return _internal_has_features();
}
inline const ::programl::Features& ProgramGraph::_internal_features() const {
  const ::programl::Features* p = _impl_.features_;
  return p != nullptr ? *p : reinterpret_cast<const ::programl::Features&>(
      ::programl::_Features_default_instance_);
}
inline const ::programl::Features& ProgramGraph::features() const {
  // @@protoc_insertion_point(field_get:programl.ProgramGraph.features)
  return _internal_features();
}
inline void ProgramGraph::unsafe_arena_set_allocated_features(
    ::programl::Features* features) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.features_);
  }
  _impl_.features_ = features;
  if (features) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:programl.ProgramGraph.features)
}
inline ::programl::Features* ProgramGraph::release_features() {
  
  ::programl::Features* temp = _impl_.features_;
  _impl_.features_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::programl::Features* ProgramGraph::unsafe_arena_release_features() {
  // @@protoc_insertion_point(field_release:programl.ProgramGraph.features)
  
  ::programl::Features* temp = _impl_.features_;
  _impl_.features_ = nullptr;
  return temp;
}
inline ::programl::Features* ProgramGraph::_internal_mutable_features() {
  
  if (_impl_.features_ == nullptr) {
    auto* p = CreateMaybeMessage<::programl::Features>(GetArenaForAllocation());
    _impl_.features_ = p;
  }
  return _impl_.features_;
}
inline ::programl::Features* ProgramGraph::mutable_features() {
  ::programl::Features* _msg = _internal_mutable_features();
  // @@protoc_insertion_point(field_mutable:programl.ProgramGraph.features)
  return _msg;
}
inline void ProgramGraph::set_allocated_features(::programl::Features* features) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.features_);
  }
  if (features) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(features));
    if (message_arena != submessage_arena) {
      features = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, features, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.features_ = features;
  // @@protoc_insertion_point(field_set_allocated:programl.ProgramGraph.features)
}

// -------------------------------------------------------------------

// Node

// .programl.Node.Type type = 1;
inline void Node::clear_type() {
  _impl_.type_ = 0;
}
inline ::programl::Node_Type Node::_internal_type() const {
  return static_cast< ::programl::Node_Type >(_impl_.type_);
}
inline ::programl::Node_Type Node::type() const {
  // @@protoc_insertion_point(field_get:programl.Node.type)
  return _internal_type();
}
inline void Node::_internal_set_type(::programl::Node_Type value) {
  
  _impl_.type_ = value;
}
inline void Node::set_type(::programl::Node_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:programl.Node.type)
}

// string text = 2;
inline void Node::clear_text() {
  _impl_.text_.ClearToEmpty();
}
inline const std::string& Node::text() const {
  // @@protoc_insertion_point(field_get:programl.Node.text)
  return _internal_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Node::set_text(ArgT0&& arg0, ArgT... args) {
 
 _impl_.text_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:programl.Node.text)
}
inline std::string* Node::mutable_text() {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:programl.Node.text)
  return _s;
}
inline const std::string& Node::_internal_text() const {
  return _impl_.text_.Get();
}
inline void Node::_internal_set_text(const std::string& value) {
  
  _impl_.text_.Set(value, GetArenaForAllocation());
}
inline std::string* Node::_internal_mutable_text() {
  
  return _impl_.text_.Mutable(GetArenaForAllocation());
}
inline std::string* Node::release_text() {
  // @@protoc_insertion_point(field_release:programl.Node.text)
  return _impl_.text_.Release();
}
inline void Node::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  _impl_.text_.SetAllocated(text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.text_.IsDefault()) {
    _impl_.text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:programl.Node.text)
}

// int32 function = 4;
inline void Node::clear_function() {
  _impl_.function_ = 0;
}
inline int32_t Node::_internal_function() const {
  return _impl_.function_;
}
inline int32_t Node::function() const {
  // @@protoc_insertion_point(field_get:programl.Node.function)
  return _internal_function();
}
inline void Node::_internal_set_function(int32_t value) {
  
  _impl_.function_ = value;
}
inline void Node::set_function(int32_t value) {
  _internal_set_function(value);
  // @@protoc_insertion_point(field_set:programl.Node.function)
}

// int32 block = 7;
inline void Node::clear_block() {
  _impl_.block_ = 0;
}
inline int32_t Node::_internal_block() const {
  return _impl_.block_;
}
inline int32_t Node::block() const {
  // @@protoc_insertion_point(field_get:programl.Node.block)
  return _internal_block();
}
inline void Node::_internal_set_block(int32_t value) {
  
  _impl_.block_ = value;
}
inline void Node::set_block(int32_t value) {
  _internal_set_block(value);
  // @@protoc_insertion_point(field_set:programl.Node.block)
}

// .programl.Features features = 8;
inline bool Node::_internal_has_features() const {
  return this != internal_default_instance() && _impl_.features_ != nullptr;
}
inline bool Node::has_features() const {
  return _internal_has_features();
}
inline const ::programl::Features& Node::_internal_features() const {
  const ::programl::Features* p = _impl_.features_;
  return p != nullptr ? *p : reinterpret_cast<const ::programl::Features&>(
      ::programl::_Features_default_instance_);
}
inline const ::programl::Features& Node::features() const {
  // @@protoc_insertion_point(field_get:programl.Node.features)
  return _internal_features();
}
inline void Node::unsafe_arena_set_allocated_features(
    ::programl::Features* features) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.features_);
  }
  _impl_.features_ = features;
  if (features) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:programl.Node.features)
}
inline ::programl::Features* Node::release_features() {
  
  ::programl::Features* temp = _impl_.features_;
  _impl_.features_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::programl::Features* Node::unsafe_arena_release_features() {
  // @@protoc_insertion_point(field_release:programl.Node.features)
  
  ::programl::Features* temp = _impl_.features_;
  _impl_.features_ = nullptr;
  return temp;
}
inline ::programl::Features* Node::_internal_mutable_features() {
  
  if (_impl_.features_ == nullptr) {
    auto* p = CreateMaybeMessage<::programl::Features>(GetArenaForAllocation());
    _impl_.features_ = p;
  }
  return _impl_.features_;
}
inline ::programl::Features* Node::mutable_features() {
  ::programl::Features* _msg = _internal_mutable_features();
  // @@protoc_insertion_point(field_mutable:programl.Node.features)
  return _msg;
}
inline void Node::set_allocated_features(::programl::Features* features) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.features_);
  }
  if (features) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(features));
    if (message_arena != submessage_arena) {
      features = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, features, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.features_ = features;
  // @@protoc_insertion_point(field_set_allocated:programl.Node.features)
}

// -------------------------------------------------------------------

// Edge

// .programl.Edge.Flow flow = 1;
inline void Edge::clear_flow() {
  _impl_.flow_ = 0;
}
inline ::programl::Edge_Flow Edge::_internal_flow() const {
  return static_cast< ::programl::Edge_Flow >(_impl_.flow_);
}
inline ::programl::Edge_Flow Edge::flow() const {
  // @@protoc_insertion_point(field_get:programl.Edge.flow)
  return _internal_flow();
}
inline void Edge::_internal_set_flow(::programl::Edge_Flow value) {
  
  _impl_.flow_ = value;
}
inline void Edge::set_flow(::programl::Edge_Flow value) {
  _internal_set_flow(value);
  // @@protoc_insertion_point(field_set:programl.Edge.flow)
}

// int32 position = 2;
inline void Edge::clear_position() {
  _impl_.position_ = 0;
}
inline int32_t Edge::_internal_position() const {
  return _impl_.position_;
}
inline int32_t Edge::position() const {
  // @@protoc_insertion_point(field_get:programl.Edge.position)
  return _internal_position();
}
inline void Edge::_internal_set_position(int32_t value) {
  
  _impl_.position_ = value;
}
inline void Edge::set_position(int32_t value) {
  _internal_set_position(value);
  // @@protoc_insertion_point(field_set:programl.Edge.position)
}

// int32 source = 3;
inline void Edge::clear_source() {
  _impl_.source_ = 0;
}
inline int32_t Edge::_internal_source() const {
  return _impl_.source_;
}
inline int32_t Edge::source() const {
  // @@protoc_insertion_point(field_get:programl.Edge.source)
  return _internal_source();
}
inline void Edge::_internal_set_source(int32_t value) {
  
  _impl_.source_ = value;
}
inline void Edge::set_source(int32_t value) {
  _internal_set_source(value);
  // @@protoc_insertion_point(field_set:programl.Edge.source)
}

// int32 target = 4;
inline void Edge::clear_target() {
  _impl_.target_ = 0;
}
inline int32_t Edge::_internal_target() const {
  return _impl_.target_;
}
inline int32_t Edge::target() const {
  // @@protoc_insertion_point(field_get:programl.Edge.target)
  return _internal_target();
}
inline void Edge::_internal_set_target(int32_t value) {
  
  _impl_.target_ = value;
}
inline void Edge::set_target(int32_t value) {
  _internal_set_target(value);
  // @@protoc_insertion_point(field_set:programl.Edge.target)
}

// .programl.Features features = 5;
inline bool Edge::_internal_has_features() const {
  return this != internal_default_instance() && _impl_.features_ != nullptr;
}
inline bool Edge::has_features() const {
  return _internal_has_features();
}
inline const ::programl::Features& Edge::_internal_features() const {
  const ::programl::Features* p = _impl_.features_;
  return p != nullptr ? *p : reinterpret_cast<const ::programl::Features&>(
      ::programl::_Features_default_instance_);
}
inline const ::programl::Features& Edge::features() const {
  // @@protoc_insertion_point(field_get:programl.Edge.features)
  return _internal_features();
}
inline void Edge::unsafe_arena_set_allocated_features(
    ::programl::Features* features) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.features_);
  }
  _impl_.features_ = features;
  if (features) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:programl.Edge.features)
}
inline ::programl::Features* Edge::release_features() {
  
  ::programl::Features* temp = _impl_.features_;
  _impl_.features_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::programl::Features* Edge::unsafe_arena_release_features() {
  // @@protoc_insertion_point(field_release:programl.Edge.features)
  
  ::programl::Features* temp = _impl_.features_;
  _impl_.features_ = nullptr;
  return temp;
}
inline ::programl::Features* Edge::_internal_mutable_features() {
  
  if (_impl_.features_ == nullptr) {
    auto* p = CreateMaybeMessage<::programl::Features>(GetArenaForAllocation());
    _impl_.features_ = p;
  }
  return _impl_.features_;
}
inline ::programl::Features* Edge::mutable_features() {
  ::programl::Features* _msg = _internal_mutable_features();
  // @@protoc_insertion_point(field_mutable:programl.Edge.features)
  return _msg;
}
inline void Edge::set_allocated_features(::programl::Features* features) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.features_);
  }
  if (features) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(features));
    if (message_arena != submessage_arena) {
      features = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, features, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.features_ = features;
  // @@protoc_insertion_point(field_set_allocated:programl.Edge.features)
}

// -------------------------------------------------------------------

// Function

// string name = 1;
inline void Function::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Function::name() const {
  // @@protoc_insertion_point(field_get:programl.Function.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Function::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:programl.Function.name)
}
inline std::string* Function::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:programl.Function.name)
  return _s;
}
inline const std::string& Function::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Function::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Function::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Function::release_name() {
  // @@protoc_insertion_point(field_release:programl.Function.name)
  return _impl_.name_.Release();
}
inline void Function::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:programl.Function.name)
}

// int32 module = 2;
inline void Function::clear_module() {
  _impl_.module_ = 0;
}
inline int32_t Function::_internal_module() const {
  return _impl_.module_;
}
inline int32_t Function::module() const {
  // @@protoc_insertion_point(field_get:programl.Function.module)
  return _internal_module();
}
inline void Function::_internal_set_module(int32_t value) {
  
  _impl_.module_ = value;
}
inline void Function::set_module(int32_t value) {
  _internal_set_module(value);
  // @@protoc_insertion_point(field_set:programl.Function.module)
}

// .programl.Features features = 3;
inline bool Function::_internal_has_features() const {
  return this != internal_default_instance() && _impl_.features_ != nullptr;
}
inline bool Function::has_features() const {
  return _internal_has_features();
}
inline const ::programl::Features& Function::_internal_features() const {
  const ::programl::Features* p = _impl_.features_;
  return p != nullptr ? *p : reinterpret_cast<const ::programl::Features&>(
      ::programl::_Features_default_instance_);
}
inline const ::programl::Features& Function::features() const {
  // @@protoc_insertion_point(field_get:programl.Function.features)
  return _internal_features();
}
inline void Function::unsafe_arena_set_allocated_features(
    ::programl::Features* features) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.features_);
  }
  _impl_.features_ = features;
  if (features) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:programl.Function.features)
}
inline ::programl::Features* Function::release_features() {
  
  ::programl::Features* temp = _impl_.features_;
  _impl_.features_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::programl::Features* Function::unsafe_arena_release_features() {
  // @@protoc_insertion_point(field_release:programl.Function.features)
  
  ::programl::Features* temp = _impl_.features_;
  _impl_.features_ = nullptr;
  return temp;
}
inline ::programl::Features* Function::_internal_mutable_features() {
  
  if (_impl_.features_ == nullptr) {
    auto* p = CreateMaybeMessage<::programl::Features>(GetArenaForAllocation());
    _impl_.features_ = p;
  }
  return _impl_.features_;
}
inline ::programl::Features* Function::mutable_features() {
  ::programl::Features* _msg = _internal_mutable_features();
  // @@protoc_insertion_point(field_mutable:programl.Function.features)
  return _msg;
}
inline void Function::set_allocated_features(::programl::Features* features) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.features_);
  }
  if (features) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(features));
    if (message_arena != submessage_arena) {
      features = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, features, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.features_ = features;
  // @@protoc_insertion_point(field_set_allocated:programl.Function.features)
}

// -------------------------------------------------------------------

// Module

// string name = 1;
inline void Module::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Module::name() const {
  // @@protoc_insertion_point(field_get:programl.Module.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Module::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:programl.Module.name)
}
inline std::string* Module::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:programl.Module.name)
  return _s;
}
inline const std::string& Module::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Module::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Module::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Module::release_name() {
  // @@protoc_insertion_point(field_release:programl.Module.name)
  return _impl_.name_.Release();
}
inline void Module::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:programl.Module.name)
}

// .programl.Features features = 2;
inline bool Module::_internal_has_features() const {
  return this != internal_default_instance() && _impl_.features_ != nullptr;
}
inline bool Module::has_features() const {
  return _internal_has_features();
}
inline const ::programl::Features& Module::_internal_features() const {
  const ::programl::Features* p = _impl_.features_;
  return p != nullptr ? *p : reinterpret_cast<const ::programl::Features&>(
      ::programl::_Features_default_instance_);
}
inline const ::programl::Features& Module::features() const {
  // @@protoc_insertion_point(field_get:programl.Module.features)
  return _internal_features();
}
inline void Module::unsafe_arena_set_allocated_features(
    ::programl::Features* features) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.features_);
  }
  _impl_.features_ = features;
  if (features) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:programl.Module.features)
}
inline ::programl::Features* Module::release_features() {
  
  ::programl::Features* temp = _impl_.features_;
  _impl_.features_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::programl::Features* Module::unsafe_arena_release_features() {
  // @@protoc_insertion_point(field_release:programl.Module.features)
  
  ::programl::Features* temp = _impl_.features_;
  _impl_.features_ = nullptr;
  return temp;
}
inline ::programl::Features* Module::_internal_mutable_features() {
  
  if (_impl_.features_ == nullptr) {
    auto* p = CreateMaybeMessage<::programl::Features>(GetArenaForAllocation());
    _impl_.features_ = p;
  }
  return _impl_.features_;
}
inline ::programl::Features* Module::mutable_features() {
  ::programl::Features* _msg = _internal_mutable_features();
  // @@protoc_insertion_point(field_mutable:programl.Module.features)
  return _msg;
}
inline void Module::set_allocated_features(::programl::Features* features) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.features_);
  }
  if (features) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(features));
    if (message_arena != submessage_arena) {
      features = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, features, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.features_ = features;
  // @@protoc_insertion_point(field_set_allocated:programl.Module.features)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace programl

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::programl::Node_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::programl::Node_Type>() {
  return ::programl::Node_Type_descriptor();
}
template <> struct is_proto_enum< ::programl::Edge_Flow> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::programl::Edge_Flow>() {
  return ::programl::Edge_Flow_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_program_5fgraph_2eproto
