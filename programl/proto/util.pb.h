// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: util.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_util_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_util_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "program_graph.pb.h"
#include "features.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_util_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_util_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[12]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_util_2eproto;
namespace programl {
class Ir;
class IrDefaultTypeInternal;
extern IrDefaultTypeInternal _Ir_default_instance_;
class IrList;
class IrListDefaultTypeInternal;
extern IrListDefaultTypeInternal _IrList_default_instance_;
class NodeIndexList;
class NodeIndexListDefaultTypeInternal;
extern NodeIndexListDefaultTypeInternal _NodeIndexList_default_instance_;
class ProgramGraphFeatures;
class ProgramGraphFeaturesDefaultTypeInternal;
extern ProgramGraphFeaturesDefaultTypeInternal _ProgramGraphFeatures_default_instance_;
class ProgramGraphFeaturesList;
class ProgramGraphFeaturesListDefaultTypeInternal;
extern ProgramGraphFeaturesListDefaultTypeInternal _ProgramGraphFeaturesList_default_instance_;
class ProgramGraphList;
class ProgramGraphListDefaultTypeInternal;
extern ProgramGraphListDefaultTypeInternal _ProgramGraphList_default_instance_;
class ProgramGraphOptions;
class ProgramGraphOptionsDefaultTypeInternal;
extern ProgramGraphOptionsDefaultTypeInternal _ProgramGraphOptions_default_instance_;
class Repo;
class RepoDefaultTypeInternal;
extern RepoDefaultTypeInternal _Repo_default_instance_;
class ResultOneIteration;
class ResultOneIterationDefaultTypeInternal;
extern ResultOneIterationDefaultTypeInternal _ResultOneIteration_default_instance_;
class ResultOneIteration_ResultMapEntry_DoNotUse;
class ResultOneIteration_ResultMapEntry_DoNotUseDefaultTypeInternal;
extern ResultOneIteration_ResultMapEntry_DoNotUseDefaultTypeInternal _ResultOneIteration_ResultMapEntry_DoNotUse_default_instance_;
class ResultsEveryIteration;
class ResultsEveryIterationDefaultTypeInternal;
extern ResultsEveryIterationDefaultTypeInternal _ResultsEveryIteration_default_instance_;
class SourceFile;
class SourceFileDefaultTypeInternal;
extern SourceFileDefaultTypeInternal _SourceFile_default_instance_;
}  // namespace programl
PROTOBUF_NAMESPACE_OPEN
template<> ::programl::Ir* Arena::CreateMaybeMessage<::programl::Ir>(Arena*);
template<> ::programl::IrList* Arena::CreateMaybeMessage<::programl::IrList>(Arena*);
template<> ::programl::NodeIndexList* Arena::CreateMaybeMessage<::programl::NodeIndexList>(Arena*);
template<> ::programl::ProgramGraphFeatures* Arena::CreateMaybeMessage<::programl::ProgramGraphFeatures>(Arena*);
template<> ::programl::ProgramGraphFeaturesList* Arena::CreateMaybeMessage<::programl::ProgramGraphFeaturesList>(Arena*);
template<> ::programl::ProgramGraphList* Arena::CreateMaybeMessage<::programl::ProgramGraphList>(Arena*);
template<> ::programl::ProgramGraphOptions* Arena::CreateMaybeMessage<::programl::ProgramGraphOptions>(Arena*);
template<> ::programl::Repo* Arena::CreateMaybeMessage<::programl::Repo>(Arena*);
template<> ::programl::ResultOneIteration* Arena::CreateMaybeMessage<::programl::ResultOneIteration>(Arena*);
template<> ::programl::ResultOneIteration_ResultMapEntry_DoNotUse* Arena::CreateMaybeMessage<::programl::ResultOneIteration_ResultMapEntry_DoNotUse>(Arena*);
template<> ::programl::ResultsEveryIteration* Arena::CreateMaybeMessage<::programl::ResultsEveryIteration>(Arena*);
template<> ::programl::SourceFile* Arena::CreateMaybeMessage<::programl::SourceFile>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace programl {

enum Ir_Type : int {
  Ir_Type_UNKNOWN = 0,
  Ir_Type_LLVM = 1,
  Ir_Type_XLA_HLO = 2,
  Ir_Type_Ir_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Ir_Type_Ir_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Ir_Type_IsValid(int value);
constexpr Ir_Type Ir_Type_Type_MIN = Ir_Type_UNKNOWN;
constexpr Ir_Type Ir_Type_Type_MAX = Ir_Type_XLA_HLO;
constexpr int Ir_Type_Type_ARRAYSIZE = Ir_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Ir_Type_descriptor();
template<typename T>
inline const std::string& Ir_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Ir_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Ir_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Ir_Type_descriptor(), enum_t_value);
}
inline bool Ir_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Ir_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Ir_Type>(
    Ir_Type_descriptor(), name, value);
}
enum SourceFile_Language : int {
  SourceFile_Language_UNKNOWN = 0,
  SourceFile_Language_C = 1,
  SourceFile_Language_CXX = 2,
  SourceFile_Language_OPENCL = 3,
  SourceFile_Language_SWIFT = 4,
  SourceFile_Language_HASKELL = 5,
  SourceFile_Language_FORTRAN = 6,
  SourceFile_Language_SourceFile_Language_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SourceFile_Language_SourceFile_Language_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SourceFile_Language_IsValid(int value);
constexpr SourceFile_Language SourceFile_Language_Language_MIN = SourceFile_Language_UNKNOWN;
constexpr SourceFile_Language SourceFile_Language_Language_MAX = SourceFile_Language_FORTRAN;
constexpr int SourceFile_Language_Language_ARRAYSIZE = SourceFile_Language_Language_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SourceFile_Language_descriptor();
template<typename T>
inline const std::string& SourceFile_Language_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SourceFile_Language>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SourceFile_Language_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SourceFile_Language_descriptor(), enum_t_value);
}
inline bool SourceFile_Language_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SourceFile_Language* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SourceFile_Language>(
    SourceFile_Language_descriptor(), name, value);
}
// ===================================================================

class ProgramGraphList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:programl.ProgramGraphList) */ {
 public:
  inline ProgramGraphList() : ProgramGraphList(nullptr) {}
  virtual ~ProgramGraphList();

  ProgramGraphList(const ProgramGraphList& from);
  ProgramGraphList(ProgramGraphList&& from) noexcept
    : ProgramGraphList() {
    *this = ::std::move(from);
  }

  inline ProgramGraphList& operator=(const ProgramGraphList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProgramGraphList& operator=(ProgramGraphList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProgramGraphList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProgramGraphList* internal_default_instance() {
    return reinterpret_cast<const ProgramGraphList*>(
               &_ProgramGraphList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ProgramGraphList& a, ProgramGraphList& b) {
    a.Swap(&b);
  }
  inline void Swap(ProgramGraphList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProgramGraphList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProgramGraphList* New() const final {
    return CreateMaybeMessage<ProgramGraphList>(nullptr);
  }

  ProgramGraphList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProgramGraphList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProgramGraphList& from);
  void MergeFrom(const ProgramGraphList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProgramGraphList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "programl.ProgramGraphList";
  }
  protected:
  explicit ProgramGraphList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_util_2eproto);
    return ::descriptor_table_util_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGraphFieldNumber = 2,
    kContextFieldNumber = 1,
  };
  // repeated .programl.ProgramGraph graph = 2;
  int graph_size() const;
  private:
  int _internal_graph_size() const;
  public:
  void clear_graph();
  ::programl::ProgramGraph* mutable_graph(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::programl::ProgramGraph >*
      mutable_graph();
  private:
  const ::programl::ProgramGraph& _internal_graph(int index) const;
  ::programl::ProgramGraph* _internal_add_graph();
  public:
  const ::programl::ProgramGraph& graph(int index) const;
  ::programl::ProgramGraph* add_graph();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::programl::ProgramGraph >&
      graph() const;

  // .programl.Features context = 1;
  bool has_context() const;
  private:
  bool _internal_has_context() const;
  public:
  void clear_context();
  const ::programl::Features& context() const;
  ::programl::Features* release_context();
  ::programl::Features* mutable_context();
  void set_allocated_context(::programl::Features* context);
  private:
  const ::programl::Features& _internal_context() const;
  ::programl::Features* _internal_mutable_context();
  public:
  void unsafe_arena_set_allocated_context(
      ::programl::Features* context);
  ::programl::Features* unsafe_arena_release_context();

  // @@protoc_insertion_point(class_scope:programl.ProgramGraphList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::programl::ProgramGraph > graph_;
  ::programl::Features* context_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_util_2eproto;
};
// -------------------------------------------------------------------

class ProgramGraphOptions PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:programl.ProgramGraphOptions) */ {
 public:
  inline ProgramGraphOptions() : ProgramGraphOptions(nullptr) {}
  virtual ~ProgramGraphOptions();

  ProgramGraphOptions(const ProgramGraphOptions& from);
  ProgramGraphOptions(ProgramGraphOptions&& from) noexcept
    : ProgramGraphOptions() {
    *this = ::std::move(from);
  }

  inline ProgramGraphOptions& operator=(const ProgramGraphOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProgramGraphOptions& operator=(ProgramGraphOptions&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProgramGraphOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProgramGraphOptions* internal_default_instance() {
    return reinterpret_cast<const ProgramGraphOptions*>(
               &_ProgramGraphOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ProgramGraphOptions& a, ProgramGraphOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(ProgramGraphOptions* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProgramGraphOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProgramGraphOptions* New() const final {
    return CreateMaybeMessage<ProgramGraphOptions>(nullptr);
  }

  ProgramGraphOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProgramGraphOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProgramGraphOptions& from);
  void MergeFrom(const ProgramGraphOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProgramGraphOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "programl.ProgramGraphOptions";
  }
  protected:
  explicit ProgramGraphOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_util_2eproto);
    return ::descriptor_table_util_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIrPathFieldNumber = 10,
    kStrictFieldNumber = 3,
    kInstructionsOnlyFieldNumber = 1,
    kIgnoreCallReturnsFieldNumber = 2,
    kOptLevelFieldNumber = 4,
  };
  // string ir_path = 10;
  void clear_ir_path();
  const std::string& ir_path() const;
  void set_ir_path(const std::string& value);
  void set_ir_path(std::string&& value);
  void set_ir_path(const char* value);
  void set_ir_path(const char* value, size_t size);
  std::string* mutable_ir_path();
  std::string* release_ir_path();
  void set_allocated_ir_path(std::string* ir_path);
  private:
  const std::string& _internal_ir_path() const;
  void _internal_set_ir_path(const std::string& value);
  std::string* _internal_mutable_ir_path();
  public:

  // bool strict = 3;
  void clear_strict();
  bool strict() const;
  void set_strict(bool value);
  private:
  bool _internal_strict() const;
  void _internal_set_strict(bool value);
  public:

  // bool instructions_only = 1;
  void clear_instructions_only();
  bool instructions_only() const;
  void set_instructions_only(bool value);
  private:
  bool _internal_instructions_only() const;
  void _internal_set_instructions_only(bool value);
  public:

  // bool ignore_call_returns = 2;
  void clear_ignore_call_returns();
  bool ignore_call_returns() const;
  void set_ignore_call_returns(bool value);
  private:
  bool _internal_ignore_call_returns() const;
  void _internal_set_ignore_call_returns(bool value);
  public:

  // int32 opt_level = 4;
  void clear_opt_level();
  ::PROTOBUF_NAMESPACE_ID::int32 opt_level() const;
  void set_opt_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_opt_level() const;
  void _internal_set_opt_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:programl.ProgramGraphOptions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ir_path_;
  bool strict_;
  bool instructions_only_;
  bool ignore_call_returns_;
  ::PROTOBUF_NAMESPACE_ID::int32 opt_level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_util_2eproto;
};
// -------------------------------------------------------------------

class ProgramGraphFeatures PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:programl.ProgramGraphFeatures) */ {
 public:
  inline ProgramGraphFeatures() : ProgramGraphFeatures(nullptr) {}
  virtual ~ProgramGraphFeatures();

  ProgramGraphFeatures(const ProgramGraphFeatures& from);
  ProgramGraphFeatures(ProgramGraphFeatures&& from) noexcept
    : ProgramGraphFeatures() {
    *this = ::std::move(from);
  }

  inline ProgramGraphFeatures& operator=(const ProgramGraphFeatures& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProgramGraphFeatures& operator=(ProgramGraphFeatures&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProgramGraphFeatures& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProgramGraphFeatures* internal_default_instance() {
    return reinterpret_cast<const ProgramGraphFeatures*>(
               &_ProgramGraphFeatures_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ProgramGraphFeatures& a, ProgramGraphFeatures& b) {
    a.Swap(&b);
  }
  inline void Swap(ProgramGraphFeatures* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProgramGraphFeatures* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProgramGraphFeatures* New() const final {
    return CreateMaybeMessage<ProgramGraphFeatures>(nullptr);
  }

  ProgramGraphFeatures* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProgramGraphFeatures>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProgramGraphFeatures& from);
  void MergeFrom(const ProgramGraphFeatures& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProgramGraphFeatures* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "programl.ProgramGraphFeatures";
  }
  protected:
  explicit ProgramGraphFeatures(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_util_2eproto);
    return ::descriptor_table_util_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeFeaturesFieldNumber = 1,
    kEdgeFeaturesFieldNumber = 2,
    kFunctionFeaturesFieldNumber = 3,
    kModuleFeaturesFieldNumber = 4,
    kFeaturesFieldNumber = 5,
  };
  // .programl.FeatureLists node_features = 1;
  bool has_node_features() const;
  private:
  bool _internal_has_node_features() const;
  public:
  void clear_node_features();
  const ::programl::FeatureLists& node_features() const;
  ::programl::FeatureLists* release_node_features();
  ::programl::FeatureLists* mutable_node_features();
  void set_allocated_node_features(::programl::FeatureLists* node_features);
  private:
  const ::programl::FeatureLists& _internal_node_features() const;
  ::programl::FeatureLists* _internal_mutable_node_features();
  public:
  void unsafe_arena_set_allocated_node_features(
      ::programl::FeatureLists* node_features);
  ::programl::FeatureLists* unsafe_arena_release_node_features();

  // .programl.FeatureLists edge_features = 2;
  bool has_edge_features() const;
  private:
  bool _internal_has_edge_features() const;
  public:
  void clear_edge_features();
  const ::programl::FeatureLists& edge_features() const;
  ::programl::FeatureLists* release_edge_features();
  ::programl::FeatureLists* mutable_edge_features();
  void set_allocated_edge_features(::programl::FeatureLists* edge_features);
  private:
  const ::programl::FeatureLists& _internal_edge_features() const;
  ::programl::FeatureLists* _internal_mutable_edge_features();
  public:
  void unsafe_arena_set_allocated_edge_features(
      ::programl::FeatureLists* edge_features);
  ::programl::FeatureLists* unsafe_arena_release_edge_features();

  // .programl.FeatureLists function_features = 3;
  bool has_function_features() const;
  private:
  bool _internal_has_function_features() const;
  public:
  void clear_function_features();
  const ::programl::FeatureLists& function_features() const;
  ::programl::FeatureLists* release_function_features();
  ::programl::FeatureLists* mutable_function_features();
  void set_allocated_function_features(::programl::FeatureLists* function_features);
  private:
  const ::programl::FeatureLists& _internal_function_features() const;
  ::programl::FeatureLists* _internal_mutable_function_features();
  public:
  void unsafe_arena_set_allocated_function_features(
      ::programl::FeatureLists* function_features);
  ::programl::FeatureLists* unsafe_arena_release_function_features();

  // .programl.FeatureLists module_features = 4;
  bool has_module_features() const;
  private:
  bool _internal_has_module_features() const;
  public:
  void clear_module_features();
  const ::programl::FeatureLists& module_features() const;
  ::programl::FeatureLists* release_module_features();
  ::programl::FeatureLists* mutable_module_features();
  void set_allocated_module_features(::programl::FeatureLists* module_features);
  private:
  const ::programl::FeatureLists& _internal_module_features() const;
  ::programl::FeatureLists* _internal_mutable_module_features();
  public:
  void unsafe_arena_set_allocated_module_features(
      ::programl::FeatureLists* module_features);
  ::programl::FeatureLists* unsafe_arena_release_module_features();

  // .programl.Features features = 5;
  bool has_features() const;
  private:
  bool _internal_has_features() const;
  public:
  void clear_features();
  const ::programl::Features& features() const;
  ::programl::Features* release_features();
  ::programl::Features* mutable_features();
  void set_allocated_features(::programl::Features* features);
  private:
  const ::programl::Features& _internal_features() const;
  ::programl::Features* _internal_mutable_features();
  public:
  void unsafe_arena_set_allocated_features(
      ::programl::Features* features);
  ::programl::Features* unsafe_arena_release_features();

  // @@protoc_insertion_point(class_scope:programl.ProgramGraphFeatures)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::programl::FeatureLists* node_features_;
  ::programl::FeatureLists* edge_features_;
  ::programl::FeatureLists* function_features_;
  ::programl::FeatureLists* module_features_;
  ::programl::Features* features_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_util_2eproto;
};
// -------------------------------------------------------------------

class ProgramGraphFeaturesList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:programl.ProgramGraphFeaturesList) */ {
 public:
  inline ProgramGraphFeaturesList() : ProgramGraphFeaturesList(nullptr) {}
  virtual ~ProgramGraphFeaturesList();

  ProgramGraphFeaturesList(const ProgramGraphFeaturesList& from);
  ProgramGraphFeaturesList(ProgramGraphFeaturesList&& from) noexcept
    : ProgramGraphFeaturesList() {
    *this = ::std::move(from);
  }

  inline ProgramGraphFeaturesList& operator=(const ProgramGraphFeaturesList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProgramGraphFeaturesList& operator=(ProgramGraphFeaturesList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProgramGraphFeaturesList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProgramGraphFeaturesList* internal_default_instance() {
    return reinterpret_cast<const ProgramGraphFeaturesList*>(
               &_ProgramGraphFeaturesList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ProgramGraphFeaturesList& a, ProgramGraphFeaturesList& b) {
    a.Swap(&b);
  }
  inline void Swap(ProgramGraphFeaturesList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProgramGraphFeaturesList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProgramGraphFeaturesList* New() const final {
    return CreateMaybeMessage<ProgramGraphFeaturesList>(nullptr);
  }

  ProgramGraphFeaturesList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProgramGraphFeaturesList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProgramGraphFeaturesList& from);
  void MergeFrom(const ProgramGraphFeaturesList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProgramGraphFeaturesList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "programl.ProgramGraphFeaturesList";
  }
  protected:
  explicit ProgramGraphFeaturesList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_util_2eproto);
    return ::descriptor_table_util_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGraphFieldNumber = 2,
    kContextFieldNumber = 1,
  };
  // repeated .programl.ProgramGraphFeatures graph = 2;
  int graph_size() const;
  private:
  int _internal_graph_size() const;
  public:
  void clear_graph();
  ::programl::ProgramGraphFeatures* mutable_graph(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::programl::ProgramGraphFeatures >*
      mutable_graph();
  private:
  const ::programl::ProgramGraphFeatures& _internal_graph(int index) const;
  ::programl::ProgramGraphFeatures* _internal_add_graph();
  public:
  const ::programl::ProgramGraphFeatures& graph(int index) const;
  ::programl::ProgramGraphFeatures* add_graph();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::programl::ProgramGraphFeatures >&
      graph() const;

  // .programl.Features context = 1;
  bool has_context() const;
  private:
  bool _internal_has_context() const;
  public:
  void clear_context();
  const ::programl::Features& context() const;
  ::programl::Features* release_context();
  ::programl::Features* mutable_context();
  void set_allocated_context(::programl::Features* context);
  private:
  const ::programl::Features& _internal_context() const;
  ::programl::Features* _internal_mutable_context();
  public:
  void unsafe_arena_set_allocated_context(
      ::programl::Features* context);
  ::programl::Features* unsafe_arena_release_context();

  // @@protoc_insertion_point(class_scope:programl.ProgramGraphFeaturesList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::programl::ProgramGraphFeatures > graph_;
  ::programl::Features* context_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_util_2eproto;
};
// -------------------------------------------------------------------

class Ir PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:programl.Ir) */ {
 public:
  inline Ir() : Ir(nullptr) {}
  virtual ~Ir();

  Ir(const Ir& from);
  Ir(Ir&& from) noexcept
    : Ir() {
    *this = ::std::move(from);
  }

  inline Ir& operator=(const Ir& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ir& operator=(Ir&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Ir& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ir* internal_default_instance() {
    return reinterpret_cast<const Ir*>(
               &_Ir_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Ir& a, Ir& b) {
    a.Swap(&b);
  }
  inline void Swap(Ir* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ir* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ir* New() const final {
    return CreateMaybeMessage<Ir>(nullptr);
  }

  Ir* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ir>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Ir& from);
  void MergeFrom(const Ir& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ir* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "programl.Ir";
  }
  protected:
  explicit Ir(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_util_2eproto);
    return ::descriptor_table_util_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Ir_Type Type;
  static constexpr Type UNKNOWN =
    Ir_Type_UNKNOWN;
  static constexpr Type LLVM =
    Ir_Type_LLVM;
  static constexpr Type XLA_HLO =
    Ir_Type_XLA_HLO;
  static inline bool Type_IsValid(int value) {
    return Ir_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    Ir_Type_Type_MIN;
  static constexpr Type Type_MAX =
    Ir_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    Ir_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return Ir_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return Ir_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return Ir_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCmdFieldNumber = 3,
    kTextFieldNumber = 4,
    kCompilerVersionFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // string cmd = 3;
  void clear_cmd();
  const std::string& cmd() const;
  void set_cmd(const std::string& value);
  void set_cmd(std::string&& value);
  void set_cmd(const char* value);
  void set_cmd(const char* value, size_t size);
  std::string* mutable_cmd();
  std::string* release_cmd();
  void set_allocated_cmd(std::string* cmd);
  private:
  const std::string& _internal_cmd() const;
  void _internal_set_cmd(const std::string& value);
  std::string* _internal_mutable_cmd();
  public:

  // string text = 4;
  void clear_text();
  const std::string& text() const;
  void set_text(const std::string& value);
  void set_text(std::string&& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  std::string* mutable_text();
  std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // int64 compiler_version = 2;
  void clear_compiler_version();
  ::PROTOBUF_NAMESPACE_ID::int64 compiler_version() const;
  void set_compiler_version(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_compiler_version() const;
  void _internal_set_compiler_version(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .programl.Ir.Type type = 1;
  void clear_type();
  ::programl::Ir_Type type() const;
  void set_type(::programl::Ir_Type value);
  private:
  ::programl::Ir_Type _internal_type() const;
  void _internal_set_type(::programl::Ir_Type value);
  public:

  // @@protoc_insertion_point(class_scope:programl.Ir)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cmd_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  ::PROTOBUF_NAMESPACE_ID::int64 compiler_version_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_util_2eproto;
};
// -------------------------------------------------------------------

class IrList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:programl.IrList) */ {
 public:
  inline IrList() : IrList(nullptr) {}
  virtual ~IrList();

  IrList(const IrList& from);
  IrList(IrList&& from) noexcept
    : IrList() {
    *this = ::std::move(from);
  }

  inline IrList& operator=(const IrList& from) {
    CopyFrom(from);
    return *this;
  }
  inline IrList& operator=(IrList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IrList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IrList* internal_default_instance() {
    return reinterpret_cast<const IrList*>(
               &_IrList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(IrList& a, IrList& b) {
    a.Swap(&b);
  }
  inline void Swap(IrList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IrList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IrList* New() const final {
    return CreateMaybeMessage<IrList>(nullptr);
  }

  IrList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IrList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IrList& from);
  void MergeFrom(const IrList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IrList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "programl.IrList";
  }
  protected:
  explicit IrList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_util_2eproto);
    return ::descriptor_table_util_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIrFieldNumber = 1,
  };
  // repeated .programl.Ir ir = 1;
  int ir_size() const;
  private:
  int _internal_ir_size() const;
  public:
  void clear_ir();
  ::programl::Ir* mutable_ir(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::programl::Ir >*
      mutable_ir();
  private:
  const ::programl::Ir& _internal_ir(int index) const;
  ::programl::Ir* _internal_add_ir();
  public:
  const ::programl::Ir& ir(int index) const;
  ::programl::Ir* add_ir();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::programl::Ir >&
      ir() const;

  // @@protoc_insertion_point(class_scope:programl.IrList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::programl::Ir > ir_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_util_2eproto;
};
// -------------------------------------------------------------------

class SourceFile PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:programl.SourceFile) */ {
 public:
  inline SourceFile() : SourceFile(nullptr) {}
  virtual ~SourceFile();

  SourceFile(const SourceFile& from);
  SourceFile(SourceFile&& from) noexcept
    : SourceFile() {
    *this = ::std::move(from);
  }

  inline SourceFile& operator=(const SourceFile& from) {
    CopyFrom(from);
    return *this;
  }
  inline SourceFile& operator=(SourceFile&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SourceFile& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SourceFile* internal_default_instance() {
    return reinterpret_cast<const SourceFile*>(
               &_SourceFile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SourceFile& a, SourceFile& b) {
    a.Swap(&b);
  }
  inline void Swap(SourceFile* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SourceFile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SourceFile* New() const final {
    return CreateMaybeMessage<SourceFile>(nullptr);
  }

  SourceFile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SourceFile>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SourceFile& from);
  void MergeFrom(const SourceFile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SourceFile* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "programl.SourceFile";
  }
  protected:
  explicit SourceFile(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_util_2eproto);
    return ::descriptor_table_util_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SourceFile_Language Language;
  static constexpr Language UNKNOWN =
    SourceFile_Language_UNKNOWN;
  static constexpr Language C =
    SourceFile_Language_C;
  static constexpr Language CXX =
    SourceFile_Language_CXX;
  static constexpr Language OPENCL =
    SourceFile_Language_OPENCL;
  static constexpr Language SWIFT =
    SourceFile_Language_SWIFT;
  static constexpr Language HASKELL =
    SourceFile_Language_HASKELL;
  static constexpr Language FORTRAN =
    SourceFile_Language_FORTRAN;
  static inline bool Language_IsValid(int value) {
    return SourceFile_Language_IsValid(value);
  }
  static constexpr Language Language_MIN =
    SourceFile_Language_Language_MIN;
  static constexpr Language Language_MAX =
    SourceFile_Language_Language_MAX;
  static constexpr int Language_ARRAYSIZE =
    SourceFile_Language_Language_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Language_descriptor() {
    return SourceFile_Language_descriptor();
  }
  template<typename T>
  static inline const std::string& Language_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Language>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Language_Name.");
    return SourceFile_Language_Name(enum_t_value);
  }
  static inline bool Language_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Language* value) {
    return SourceFile_Language_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRelpathFieldNumber = 1,
    kTextFieldNumber = 3,
    kLanguageFieldNumber = 2,
  };
  // string relpath = 1;
  void clear_relpath();
  const std::string& relpath() const;
  void set_relpath(const std::string& value);
  void set_relpath(std::string&& value);
  void set_relpath(const char* value);
  void set_relpath(const char* value, size_t size);
  std::string* mutable_relpath();
  std::string* release_relpath();
  void set_allocated_relpath(std::string* relpath);
  private:
  const std::string& _internal_relpath() const;
  void _internal_set_relpath(const std::string& value);
  std::string* _internal_mutable_relpath();
  public:

  // string text = 3;
  void clear_text();
  const std::string& text() const;
  void set_text(const std::string& value);
  void set_text(std::string&& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  std::string* mutable_text();
  std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // .programl.SourceFile.Language language = 2;
  void clear_language();
  ::programl::SourceFile_Language language() const;
  void set_language(::programl::SourceFile_Language value);
  private:
  ::programl::SourceFile_Language _internal_language() const;
  void _internal_set_language(::programl::SourceFile_Language value);
  public:

  // @@protoc_insertion_point(class_scope:programl.SourceFile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr relpath_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  int language_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_util_2eproto;
};
// -------------------------------------------------------------------

class Repo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:programl.Repo) */ {
 public:
  inline Repo() : Repo(nullptr) {}
  virtual ~Repo();

  Repo(const Repo& from);
  Repo(Repo&& from) noexcept
    : Repo() {
    *this = ::std::move(from);
  }

  inline Repo& operator=(const Repo& from) {
    CopyFrom(from);
    return *this;
  }
  inline Repo& operator=(Repo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Repo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Repo* internal_default_instance() {
    return reinterpret_cast<const Repo*>(
               &_Repo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Repo& a, Repo& b) {
    a.Swap(&b);
  }
  inline void Swap(Repo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Repo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Repo* New() const final {
    return CreateMaybeMessage<Repo>(nullptr);
  }

  Repo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Repo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Repo& from);
  void MergeFrom(const Repo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Repo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "programl.Repo";
  }
  protected:
  explicit Repo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_util_2eproto);
    return ::descriptor_table_util_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 1,
    kSha1FieldNumber = 2,
    kCreatedMsTimestampFieldNumber = 3,
  };
  // string url = 1;
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // string sha1 = 2;
  void clear_sha1();
  const std::string& sha1() const;
  void set_sha1(const std::string& value);
  void set_sha1(std::string&& value);
  void set_sha1(const char* value);
  void set_sha1(const char* value, size_t size);
  std::string* mutable_sha1();
  std::string* release_sha1();
  void set_allocated_sha1(std::string* sha1);
  private:
  const std::string& _internal_sha1() const;
  void _internal_set_sha1(const std::string& value);
  std::string* _internal_mutable_sha1();
  public:

  // int64 created_ms_timestamp = 3;
  void clear_created_ms_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 created_ms_timestamp() const;
  void set_created_ms_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_created_ms_timestamp() const;
  void _internal_set_created_ms_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:programl.Repo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sha1_;
  ::PROTOBUF_NAMESPACE_ID::int64 created_ms_timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_util_2eproto;
};
// -------------------------------------------------------------------

class NodeIndexList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:programl.NodeIndexList) */ {
 public:
  inline NodeIndexList() : NodeIndexList(nullptr) {}
  virtual ~NodeIndexList();

  NodeIndexList(const NodeIndexList& from);
  NodeIndexList(NodeIndexList&& from) noexcept
    : NodeIndexList() {
    *this = ::std::move(from);
  }

  inline NodeIndexList& operator=(const NodeIndexList& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeIndexList& operator=(NodeIndexList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NodeIndexList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeIndexList* internal_default_instance() {
    return reinterpret_cast<const NodeIndexList*>(
               &_NodeIndexList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(NodeIndexList& a, NodeIndexList& b) {
    a.Swap(&b);
  }
  inline void Swap(NodeIndexList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NodeIndexList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NodeIndexList* New() const final {
    return CreateMaybeMessage<NodeIndexList>(nullptr);
  }

  NodeIndexList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NodeIndexList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NodeIndexList& from);
  void MergeFrom(const NodeIndexList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeIndexList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "programl.NodeIndexList";
  }
  protected:
  explicit NodeIndexList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_util_2eproto);
    return ::descriptor_table_util_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeFieldNumber = 1,
  };
  // repeated int32 node = 1;
  int node_size() const;
  private:
  int _internal_node_size() const;
  public:
  void clear_node();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_node(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_node() const;
  void _internal_add_node(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_node();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 node(int index) const;
  void set_node(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_node(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      node() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_node();

  // @@protoc_insertion_point(class_scope:programl.NodeIndexList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > node_;
  mutable std::atomic<int> _node_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_util_2eproto;
};
// -------------------------------------------------------------------

class ResultsEveryIteration PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:programl.ResultsEveryIteration) */ {
 public:
  inline ResultsEveryIteration() : ResultsEveryIteration(nullptr) {}
  virtual ~ResultsEveryIteration();

  ResultsEveryIteration(const ResultsEveryIteration& from);
  ResultsEveryIteration(ResultsEveryIteration&& from) noexcept
    : ResultsEveryIteration() {
    *this = ::std::move(from);
  }

  inline ResultsEveryIteration& operator=(const ResultsEveryIteration& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResultsEveryIteration& operator=(ResultsEveryIteration&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResultsEveryIteration& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResultsEveryIteration* internal_default_instance() {
    return reinterpret_cast<const ResultsEveryIteration*>(
               &_ResultsEveryIteration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ResultsEveryIteration& a, ResultsEveryIteration& b) {
    a.Swap(&b);
  }
  inline void Swap(ResultsEveryIteration* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResultsEveryIteration* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResultsEveryIteration* New() const final {
    return CreateMaybeMessage<ResultsEveryIteration>(nullptr);
  }

  ResultsEveryIteration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResultsEveryIteration>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResultsEveryIteration& from);
  void MergeFrom(const ResultsEveryIteration& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResultsEveryIteration* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "programl.ResultsEveryIteration";
  }
  protected:
  explicit ResultsEveryIteration(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_util_2eproto);
    return ::descriptor_table_util_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultsEveryIterationFieldNumber = 1,
    kTaskNameFieldNumber = 4,
    kProgramPointsFieldNumber = 2,
    kInterestedPointsFieldNumber = 3,
  };
  // repeated .programl.ResultOneIteration results_every_iteration = 1;
  int results_every_iteration_size() const;
  private:
  int _internal_results_every_iteration_size() const;
  public:
  void clear_results_every_iteration();
  ::programl::ResultOneIteration* mutable_results_every_iteration(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::programl::ResultOneIteration >*
      mutable_results_every_iteration();
  private:
  const ::programl::ResultOneIteration& _internal_results_every_iteration(int index) const;
  ::programl::ResultOneIteration* _internal_add_results_every_iteration();
  public:
  const ::programl::ResultOneIteration& results_every_iteration(int index) const;
  ::programl::ResultOneIteration* add_results_every_iteration();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::programl::ResultOneIteration >&
      results_every_iteration() const;

  // string task_name = 4;
  bool has_task_name() const;
  private:
  bool _internal_has_task_name() const;
  public:
  void clear_task_name();
  const std::string& task_name() const;
  void set_task_name(const std::string& value);
  void set_task_name(std::string&& value);
  void set_task_name(const char* value);
  void set_task_name(const char* value, size_t size);
  std::string* mutable_task_name();
  std::string* release_task_name();
  void set_allocated_task_name(std::string* task_name);
  private:
  const std::string& _internal_task_name() const;
  void _internal_set_task_name(const std::string& value);
  std::string* _internal_mutable_task_name();
  public:

  // .programl.Int64List program_points = 2;
  bool has_program_points() const;
  private:
  bool _internal_has_program_points() const;
  public:
  void clear_program_points();
  const ::programl::Int64List& program_points() const;
  ::programl::Int64List* release_program_points();
  ::programl::Int64List* mutable_program_points();
  void set_allocated_program_points(::programl::Int64List* program_points);
  private:
  const ::programl::Int64List& _internal_program_points() const;
  ::programl::Int64List* _internal_mutable_program_points();
  public:
  void unsafe_arena_set_allocated_program_points(
      ::programl::Int64List* program_points);
  ::programl::Int64List* unsafe_arena_release_program_points();

  // .programl.Int64List interested_points = 3;
  bool has_interested_points() const;
  private:
  bool _internal_has_interested_points() const;
  public:
  void clear_interested_points();
  const ::programl::Int64List& interested_points() const;
  ::programl::Int64List* release_interested_points();
  ::programl::Int64List* mutable_interested_points();
  void set_allocated_interested_points(::programl::Int64List* interested_points);
  private:
  const ::programl::Int64List& _internal_interested_points() const;
  ::programl::Int64List* _internal_mutable_interested_points();
  public:
  void unsafe_arena_set_allocated_interested_points(
      ::programl::Int64List* interested_points);
  ::programl::Int64List* unsafe_arena_release_interested_points();

  // @@protoc_insertion_point(class_scope:programl.ResultsEveryIteration)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::programl::ResultOneIteration > results_every_iteration_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr task_name_;
  ::programl::Int64List* program_points_;
  ::programl::Int64List* interested_points_;
  friend struct ::TableStruct_util_2eproto;
};
// -------------------------------------------------------------------

class ResultOneIteration_ResultMapEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ResultOneIteration_ResultMapEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int64, ::programl::Int64List,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ResultOneIteration_ResultMapEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int64, ::programl::Int64List,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  ResultOneIteration_ResultMapEntry_DoNotUse();
  explicit ResultOneIteration_ResultMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ResultOneIteration_ResultMapEntry_DoNotUse& other);
  static const ResultOneIteration_ResultMapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ResultOneIteration_ResultMapEntry_DoNotUse*>(&_ResultOneIteration_ResultMapEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_util_2eproto);
    return ::descriptor_table_util_2eproto.file_level_metadata[10];
  }

  public:
};

// -------------------------------------------------------------------

class ResultOneIteration PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:programl.ResultOneIteration) */ {
 public:
  inline ResultOneIteration() : ResultOneIteration(nullptr) {}
  virtual ~ResultOneIteration();

  ResultOneIteration(const ResultOneIteration& from);
  ResultOneIteration(ResultOneIteration&& from) noexcept
    : ResultOneIteration() {
    *this = ::std::move(from);
  }

  inline ResultOneIteration& operator=(const ResultOneIteration& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResultOneIteration& operator=(ResultOneIteration&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResultOneIteration& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResultOneIteration* internal_default_instance() {
    return reinterpret_cast<const ResultOneIteration*>(
               &_ResultOneIteration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ResultOneIteration& a, ResultOneIteration& b) {
    a.Swap(&b);
  }
  inline void Swap(ResultOneIteration* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResultOneIteration* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResultOneIteration* New() const final {
    return CreateMaybeMessage<ResultOneIteration>(nullptr);
  }

  ResultOneIteration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResultOneIteration>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResultOneIteration& from);
  void MergeFrom(const ResultOneIteration& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResultOneIteration* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "programl.ResultOneIteration";
  }
  protected:
  explicit ResultOneIteration(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_util_2eproto);
    return ::descriptor_table_util_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kResultMapFieldNumber = 1,
  };
  // map<int64, .programl.Int64List> result_map = 1;
  int result_map_size() const;
  private:
  int _internal_result_map_size() const;
  public:
  void clear_result_map();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::programl::Int64List >&
      _internal_result_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::programl::Int64List >*
      _internal_mutable_result_map();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::programl::Int64List >&
      result_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::programl::Int64List >*
      mutable_result_map();

  // @@protoc_insertion_point(class_scope:programl.ResultOneIteration)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      ResultOneIteration_ResultMapEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int64, ::programl::Int64List,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > result_map_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_util_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ProgramGraphList

// .programl.Features context = 1;
inline bool ProgramGraphList::_internal_has_context() const {
  return this != internal_default_instance() && context_ != nullptr;
}
inline bool ProgramGraphList::has_context() const {
  return _internal_has_context();
}
inline const ::programl::Features& ProgramGraphList::_internal_context() const {
  const ::programl::Features* p = context_;
  return p != nullptr ? *p : *reinterpret_cast<const ::programl::Features*>(
      &::programl::_Features_default_instance_);
}
inline const ::programl::Features& ProgramGraphList::context() const {
  // @@protoc_insertion_point(field_get:programl.ProgramGraphList.context)
  return _internal_context();
}
inline void ProgramGraphList::unsafe_arena_set_allocated_context(
    ::programl::Features* context) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(context_);
  }
  context_ = context;
  if (context) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:programl.ProgramGraphList.context)
}
inline ::programl::Features* ProgramGraphList::release_context() {
  
  ::programl::Features* temp = context_;
  context_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::programl::Features* ProgramGraphList::unsafe_arena_release_context() {
  // @@protoc_insertion_point(field_release:programl.ProgramGraphList.context)
  
  ::programl::Features* temp = context_;
  context_ = nullptr;
  return temp;
}
inline ::programl::Features* ProgramGraphList::_internal_mutable_context() {
  
  if (context_ == nullptr) {
    auto* p = CreateMaybeMessage<::programl::Features>(GetArena());
    context_ = p;
  }
  return context_;
}
inline ::programl::Features* ProgramGraphList::mutable_context() {
  // @@protoc_insertion_point(field_mutable:programl.ProgramGraphList.context)
  return _internal_mutable_context();
}
inline void ProgramGraphList::set_allocated_context(::programl::Features* context) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(context_);
  }
  if (context) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(context)->GetArena();
    if (message_arena != submessage_arena) {
      context = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, context, submessage_arena);
    }
    
  } else {
    
  }
  context_ = context;
  // @@protoc_insertion_point(field_set_allocated:programl.ProgramGraphList.context)
}

// repeated .programl.ProgramGraph graph = 2;
inline int ProgramGraphList::_internal_graph_size() const {
  return graph_.size();
}
inline int ProgramGraphList::graph_size() const {
  return _internal_graph_size();
}
inline ::programl::ProgramGraph* ProgramGraphList::mutable_graph(int index) {
  // @@protoc_insertion_point(field_mutable:programl.ProgramGraphList.graph)
  return graph_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::programl::ProgramGraph >*
ProgramGraphList::mutable_graph() {
  // @@protoc_insertion_point(field_mutable_list:programl.ProgramGraphList.graph)
  return &graph_;
}
inline const ::programl::ProgramGraph& ProgramGraphList::_internal_graph(int index) const {
  return graph_.Get(index);
}
inline const ::programl::ProgramGraph& ProgramGraphList::graph(int index) const {
  // @@protoc_insertion_point(field_get:programl.ProgramGraphList.graph)
  return _internal_graph(index);
}
inline ::programl::ProgramGraph* ProgramGraphList::_internal_add_graph() {
  return graph_.Add();
}
inline ::programl::ProgramGraph* ProgramGraphList::add_graph() {
  // @@protoc_insertion_point(field_add:programl.ProgramGraphList.graph)
  return _internal_add_graph();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::programl::ProgramGraph >&
ProgramGraphList::graph() const {
  // @@protoc_insertion_point(field_list:programl.ProgramGraphList.graph)
  return graph_;
}

// -------------------------------------------------------------------

// ProgramGraphOptions

// bool strict = 3;
inline void ProgramGraphOptions::clear_strict() {
  strict_ = false;
}
inline bool ProgramGraphOptions::_internal_strict() const {
  return strict_;
}
inline bool ProgramGraphOptions::strict() const {
  // @@protoc_insertion_point(field_get:programl.ProgramGraphOptions.strict)
  return _internal_strict();
}
inline void ProgramGraphOptions::_internal_set_strict(bool value) {
  
  strict_ = value;
}
inline void ProgramGraphOptions::set_strict(bool value) {
  _internal_set_strict(value);
  // @@protoc_insertion_point(field_set:programl.ProgramGraphOptions.strict)
}

// bool instructions_only = 1;
inline void ProgramGraphOptions::clear_instructions_only() {
  instructions_only_ = false;
}
inline bool ProgramGraphOptions::_internal_instructions_only() const {
  return instructions_only_;
}
inline bool ProgramGraphOptions::instructions_only() const {
  // @@protoc_insertion_point(field_get:programl.ProgramGraphOptions.instructions_only)
  return _internal_instructions_only();
}
inline void ProgramGraphOptions::_internal_set_instructions_only(bool value) {
  
  instructions_only_ = value;
}
inline void ProgramGraphOptions::set_instructions_only(bool value) {
  _internal_set_instructions_only(value);
  // @@protoc_insertion_point(field_set:programl.ProgramGraphOptions.instructions_only)
}

// bool ignore_call_returns = 2;
inline void ProgramGraphOptions::clear_ignore_call_returns() {
  ignore_call_returns_ = false;
}
inline bool ProgramGraphOptions::_internal_ignore_call_returns() const {
  return ignore_call_returns_;
}
inline bool ProgramGraphOptions::ignore_call_returns() const {
  // @@protoc_insertion_point(field_get:programl.ProgramGraphOptions.ignore_call_returns)
  return _internal_ignore_call_returns();
}
inline void ProgramGraphOptions::_internal_set_ignore_call_returns(bool value) {
  
  ignore_call_returns_ = value;
}
inline void ProgramGraphOptions::set_ignore_call_returns(bool value) {
  _internal_set_ignore_call_returns(value);
  // @@protoc_insertion_point(field_set:programl.ProgramGraphOptions.ignore_call_returns)
}

// int32 opt_level = 4;
inline void ProgramGraphOptions::clear_opt_level() {
  opt_level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProgramGraphOptions::_internal_opt_level() const {
  return opt_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProgramGraphOptions::opt_level() const {
  // @@protoc_insertion_point(field_get:programl.ProgramGraphOptions.opt_level)
  return _internal_opt_level();
}
inline void ProgramGraphOptions::_internal_set_opt_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  opt_level_ = value;
}
inline void ProgramGraphOptions::set_opt_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_opt_level(value);
  // @@protoc_insertion_point(field_set:programl.ProgramGraphOptions.opt_level)
}

// string ir_path = 10;
inline void ProgramGraphOptions::clear_ir_path() {
  ir_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ProgramGraphOptions::ir_path() const {
  // @@protoc_insertion_point(field_get:programl.ProgramGraphOptions.ir_path)
  return _internal_ir_path();
}
inline void ProgramGraphOptions::set_ir_path(const std::string& value) {
  _internal_set_ir_path(value);
  // @@protoc_insertion_point(field_set:programl.ProgramGraphOptions.ir_path)
}
inline std::string* ProgramGraphOptions::mutable_ir_path() {
  // @@protoc_insertion_point(field_mutable:programl.ProgramGraphOptions.ir_path)
  return _internal_mutable_ir_path();
}
inline const std::string& ProgramGraphOptions::_internal_ir_path() const {
  return ir_path_.Get();
}
inline void ProgramGraphOptions::_internal_set_ir_path(const std::string& value) {
  
  ir_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ProgramGraphOptions::set_ir_path(std::string&& value) {
  
  ir_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:programl.ProgramGraphOptions.ir_path)
}
inline void ProgramGraphOptions::set_ir_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ir_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:programl.ProgramGraphOptions.ir_path)
}
inline void ProgramGraphOptions::set_ir_path(const char* value,
    size_t size) {
  
  ir_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:programl.ProgramGraphOptions.ir_path)
}
inline std::string* ProgramGraphOptions::_internal_mutable_ir_path() {
  
  return ir_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ProgramGraphOptions::release_ir_path() {
  // @@protoc_insertion_point(field_release:programl.ProgramGraphOptions.ir_path)
  return ir_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProgramGraphOptions::set_allocated_ir_path(std::string* ir_path) {
  if (ir_path != nullptr) {
    
  } else {
    
  }
  ir_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ir_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:programl.ProgramGraphOptions.ir_path)
}

// -------------------------------------------------------------------

// ProgramGraphFeatures

// .programl.FeatureLists node_features = 1;
inline bool ProgramGraphFeatures::_internal_has_node_features() const {
  return this != internal_default_instance() && node_features_ != nullptr;
}
inline bool ProgramGraphFeatures::has_node_features() const {
  return _internal_has_node_features();
}
inline const ::programl::FeatureLists& ProgramGraphFeatures::_internal_node_features() const {
  const ::programl::FeatureLists* p = node_features_;
  return p != nullptr ? *p : *reinterpret_cast<const ::programl::FeatureLists*>(
      &::programl::_FeatureLists_default_instance_);
}
inline const ::programl::FeatureLists& ProgramGraphFeatures::node_features() const {
  // @@protoc_insertion_point(field_get:programl.ProgramGraphFeatures.node_features)
  return _internal_node_features();
}
inline void ProgramGraphFeatures::unsafe_arena_set_allocated_node_features(
    ::programl::FeatureLists* node_features) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(node_features_);
  }
  node_features_ = node_features;
  if (node_features) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:programl.ProgramGraphFeatures.node_features)
}
inline ::programl::FeatureLists* ProgramGraphFeatures::release_node_features() {
  
  ::programl::FeatureLists* temp = node_features_;
  node_features_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::programl::FeatureLists* ProgramGraphFeatures::unsafe_arena_release_node_features() {
  // @@protoc_insertion_point(field_release:programl.ProgramGraphFeatures.node_features)
  
  ::programl::FeatureLists* temp = node_features_;
  node_features_ = nullptr;
  return temp;
}
inline ::programl::FeatureLists* ProgramGraphFeatures::_internal_mutable_node_features() {
  
  if (node_features_ == nullptr) {
    auto* p = CreateMaybeMessage<::programl::FeatureLists>(GetArena());
    node_features_ = p;
  }
  return node_features_;
}
inline ::programl::FeatureLists* ProgramGraphFeatures::mutable_node_features() {
  // @@protoc_insertion_point(field_mutable:programl.ProgramGraphFeatures.node_features)
  return _internal_mutable_node_features();
}
inline void ProgramGraphFeatures::set_allocated_node_features(::programl::FeatureLists* node_features) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(node_features_);
  }
  if (node_features) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(node_features)->GetArena();
    if (message_arena != submessage_arena) {
      node_features = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, node_features, submessage_arena);
    }
    
  } else {
    
  }
  node_features_ = node_features;
  // @@protoc_insertion_point(field_set_allocated:programl.ProgramGraphFeatures.node_features)
}

// .programl.FeatureLists edge_features = 2;
inline bool ProgramGraphFeatures::_internal_has_edge_features() const {
  return this != internal_default_instance() && edge_features_ != nullptr;
}
inline bool ProgramGraphFeatures::has_edge_features() const {
  return _internal_has_edge_features();
}
inline const ::programl::FeatureLists& ProgramGraphFeatures::_internal_edge_features() const {
  const ::programl::FeatureLists* p = edge_features_;
  return p != nullptr ? *p : *reinterpret_cast<const ::programl::FeatureLists*>(
      &::programl::_FeatureLists_default_instance_);
}
inline const ::programl::FeatureLists& ProgramGraphFeatures::edge_features() const {
  // @@protoc_insertion_point(field_get:programl.ProgramGraphFeatures.edge_features)
  return _internal_edge_features();
}
inline void ProgramGraphFeatures::unsafe_arena_set_allocated_edge_features(
    ::programl::FeatureLists* edge_features) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(edge_features_);
  }
  edge_features_ = edge_features;
  if (edge_features) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:programl.ProgramGraphFeatures.edge_features)
}
inline ::programl::FeatureLists* ProgramGraphFeatures::release_edge_features() {
  
  ::programl::FeatureLists* temp = edge_features_;
  edge_features_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::programl::FeatureLists* ProgramGraphFeatures::unsafe_arena_release_edge_features() {
  // @@protoc_insertion_point(field_release:programl.ProgramGraphFeatures.edge_features)
  
  ::programl::FeatureLists* temp = edge_features_;
  edge_features_ = nullptr;
  return temp;
}
inline ::programl::FeatureLists* ProgramGraphFeatures::_internal_mutable_edge_features() {
  
  if (edge_features_ == nullptr) {
    auto* p = CreateMaybeMessage<::programl::FeatureLists>(GetArena());
    edge_features_ = p;
  }
  return edge_features_;
}
inline ::programl::FeatureLists* ProgramGraphFeatures::mutable_edge_features() {
  // @@protoc_insertion_point(field_mutable:programl.ProgramGraphFeatures.edge_features)
  return _internal_mutable_edge_features();
}
inline void ProgramGraphFeatures::set_allocated_edge_features(::programl::FeatureLists* edge_features) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(edge_features_);
  }
  if (edge_features) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(edge_features)->GetArena();
    if (message_arena != submessage_arena) {
      edge_features = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, edge_features, submessage_arena);
    }
    
  } else {
    
  }
  edge_features_ = edge_features;
  // @@protoc_insertion_point(field_set_allocated:programl.ProgramGraphFeatures.edge_features)
}

// .programl.FeatureLists function_features = 3;
inline bool ProgramGraphFeatures::_internal_has_function_features() const {
  return this != internal_default_instance() && function_features_ != nullptr;
}
inline bool ProgramGraphFeatures::has_function_features() const {
  return _internal_has_function_features();
}
inline const ::programl::FeatureLists& ProgramGraphFeatures::_internal_function_features() const {
  const ::programl::FeatureLists* p = function_features_;
  return p != nullptr ? *p : *reinterpret_cast<const ::programl::FeatureLists*>(
      &::programl::_FeatureLists_default_instance_);
}
inline const ::programl::FeatureLists& ProgramGraphFeatures::function_features() const {
  // @@protoc_insertion_point(field_get:programl.ProgramGraphFeatures.function_features)
  return _internal_function_features();
}
inline void ProgramGraphFeatures::unsafe_arena_set_allocated_function_features(
    ::programl::FeatureLists* function_features) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(function_features_);
  }
  function_features_ = function_features;
  if (function_features) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:programl.ProgramGraphFeatures.function_features)
}
inline ::programl::FeatureLists* ProgramGraphFeatures::release_function_features() {
  
  ::programl::FeatureLists* temp = function_features_;
  function_features_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::programl::FeatureLists* ProgramGraphFeatures::unsafe_arena_release_function_features() {
  // @@protoc_insertion_point(field_release:programl.ProgramGraphFeatures.function_features)
  
  ::programl::FeatureLists* temp = function_features_;
  function_features_ = nullptr;
  return temp;
}
inline ::programl::FeatureLists* ProgramGraphFeatures::_internal_mutable_function_features() {
  
  if (function_features_ == nullptr) {
    auto* p = CreateMaybeMessage<::programl::FeatureLists>(GetArena());
    function_features_ = p;
  }
  return function_features_;
}
inline ::programl::FeatureLists* ProgramGraphFeatures::mutable_function_features() {
  // @@protoc_insertion_point(field_mutable:programl.ProgramGraphFeatures.function_features)
  return _internal_mutable_function_features();
}
inline void ProgramGraphFeatures::set_allocated_function_features(::programl::FeatureLists* function_features) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(function_features_);
  }
  if (function_features) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(function_features)->GetArena();
    if (message_arena != submessage_arena) {
      function_features = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, function_features, submessage_arena);
    }
    
  } else {
    
  }
  function_features_ = function_features;
  // @@protoc_insertion_point(field_set_allocated:programl.ProgramGraphFeatures.function_features)
}

// .programl.FeatureLists module_features = 4;
inline bool ProgramGraphFeatures::_internal_has_module_features() const {
  return this != internal_default_instance() && module_features_ != nullptr;
}
inline bool ProgramGraphFeatures::has_module_features() const {
  return _internal_has_module_features();
}
inline const ::programl::FeatureLists& ProgramGraphFeatures::_internal_module_features() const {
  const ::programl::FeatureLists* p = module_features_;
  return p != nullptr ? *p : *reinterpret_cast<const ::programl::FeatureLists*>(
      &::programl::_FeatureLists_default_instance_);
}
inline const ::programl::FeatureLists& ProgramGraphFeatures::module_features() const {
  // @@protoc_insertion_point(field_get:programl.ProgramGraphFeatures.module_features)
  return _internal_module_features();
}
inline void ProgramGraphFeatures::unsafe_arena_set_allocated_module_features(
    ::programl::FeatureLists* module_features) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(module_features_);
  }
  module_features_ = module_features;
  if (module_features) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:programl.ProgramGraphFeatures.module_features)
}
inline ::programl::FeatureLists* ProgramGraphFeatures::release_module_features() {
  
  ::programl::FeatureLists* temp = module_features_;
  module_features_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::programl::FeatureLists* ProgramGraphFeatures::unsafe_arena_release_module_features() {
  // @@protoc_insertion_point(field_release:programl.ProgramGraphFeatures.module_features)
  
  ::programl::FeatureLists* temp = module_features_;
  module_features_ = nullptr;
  return temp;
}
inline ::programl::FeatureLists* ProgramGraphFeatures::_internal_mutable_module_features() {
  
  if (module_features_ == nullptr) {
    auto* p = CreateMaybeMessage<::programl::FeatureLists>(GetArena());
    module_features_ = p;
  }
  return module_features_;
}
inline ::programl::FeatureLists* ProgramGraphFeatures::mutable_module_features() {
  // @@protoc_insertion_point(field_mutable:programl.ProgramGraphFeatures.module_features)
  return _internal_mutable_module_features();
}
inline void ProgramGraphFeatures::set_allocated_module_features(::programl::FeatureLists* module_features) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(module_features_);
  }
  if (module_features) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(module_features)->GetArena();
    if (message_arena != submessage_arena) {
      module_features = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, module_features, submessage_arena);
    }
    
  } else {
    
  }
  module_features_ = module_features;
  // @@protoc_insertion_point(field_set_allocated:programl.ProgramGraphFeatures.module_features)
}

// .programl.Features features = 5;
inline bool ProgramGraphFeatures::_internal_has_features() const {
  return this != internal_default_instance() && features_ != nullptr;
}
inline bool ProgramGraphFeatures::has_features() const {
  return _internal_has_features();
}
inline const ::programl::Features& ProgramGraphFeatures::_internal_features() const {
  const ::programl::Features* p = features_;
  return p != nullptr ? *p : *reinterpret_cast<const ::programl::Features*>(
      &::programl::_Features_default_instance_);
}
inline const ::programl::Features& ProgramGraphFeatures::features() const {
  // @@protoc_insertion_point(field_get:programl.ProgramGraphFeatures.features)
  return _internal_features();
}
inline void ProgramGraphFeatures::unsafe_arena_set_allocated_features(
    ::programl::Features* features) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(features_);
  }
  features_ = features;
  if (features) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:programl.ProgramGraphFeatures.features)
}
inline ::programl::Features* ProgramGraphFeatures::release_features() {
  
  ::programl::Features* temp = features_;
  features_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::programl::Features* ProgramGraphFeatures::unsafe_arena_release_features() {
  // @@protoc_insertion_point(field_release:programl.ProgramGraphFeatures.features)
  
  ::programl::Features* temp = features_;
  features_ = nullptr;
  return temp;
}
inline ::programl::Features* ProgramGraphFeatures::_internal_mutable_features() {
  
  if (features_ == nullptr) {
    auto* p = CreateMaybeMessage<::programl::Features>(GetArena());
    features_ = p;
  }
  return features_;
}
inline ::programl::Features* ProgramGraphFeatures::mutable_features() {
  // @@protoc_insertion_point(field_mutable:programl.ProgramGraphFeatures.features)
  return _internal_mutable_features();
}
inline void ProgramGraphFeatures::set_allocated_features(::programl::Features* features) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(features_);
  }
  if (features) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(features)->GetArena();
    if (message_arena != submessage_arena) {
      features = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, features, submessage_arena);
    }
    
  } else {
    
  }
  features_ = features;
  // @@protoc_insertion_point(field_set_allocated:programl.ProgramGraphFeatures.features)
}

// -------------------------------------------------------------------

// ProgramGraphFeaturesList

// .programl.Features context = 1;
inline bool ProgramGraphFeaturesList::_internal_has_context() const {
  return this != internal_default_instance() && context_ != nullptr;
}
inline bool ProgramGraphFeaturesList::has_context() const {
  return _internal_has_context();
}
inline const ::programl::Features& ProgramGraphFeaturesList::_internal_context() const {
  const ::programl::Features* p = context_;
  return p != nullptr ? *p : *reinterpret_cast<const ::programl::Features*>(
      &::programl::_Features_default_instance_);
}
inline const ::programl::Features& ProgramGraphFeaturesList::context() const {
  // @@protoc_insertion_point(field_get:programl.ProgramGraphFeaturesList.context)
  return _internal_context();
}
inline void ProgramGraphFeaturesList::unsafe_arena_set_allocated_context(
    ::programl::Features* context) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(context_);
  }
  context_ = context;
  if (context) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:programl.ProgramGraphFeaturesList.context)
}
inline ::programl::Features* ProgramGraphFeaturesList::release_context() {
  
  ::programl::Features* temp = context_;
  context_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::programl::Features* ProgramGraphFeaturesList::unsafe_arena_release_context() {
  // @@protoc_insertion_point(field_release:programl.ProgramGraphFeaturesList.context)
  
  ::programl::Features* temp = context_;
  context_ = nullptr;
  return temp;
}
inline ::programl::Features* ProgramGraphFeaturesList::_internal_mutable_context() {
  
  if (context_ == nullptr) {
    auto* p = CreateMaybeMessage<::programl::Features>(GetArena());
    context_ = p;
  }
  return context_;
}
inline ::programl::Features* ProgramGraphFeaturesList::mutable_context() {
  // @@protoc_insertion_point(field_mutable:programl.ProgramGraphFeaturesList.context)
  return _internal_mutable_context();
}
inline void ProgramGraphFeaturesList::set_allocated_context(::programl::Features* context) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(context_);
  }
  if (context) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(context)->GetArena();
    if (message_arena != submessage_arena) {
      context = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, context, submessage_arena);
    }
    
  } else {
    
  }
  context_ = context;
  // @@protoc_insertion_point(field_set_allocated:programl.ProgramGraphFeaturesList.context)
}

// repeated .programl.ProgramGraphFeatures graph = 2;
inline int ProgramGraphFeaturesList::_internal_graph_size() const {
  return graph_.size();
}
inline int ProgramGraphFeaturesList::graph_size() const {
  return _internal_graph_size();
}
inline void ProgramGraphFeaturesList::clear_graph() {
  graph_.Clear();
}
inline ::programl::ProgramGraphFeatures* ProgramGraphFeaturesList::mutable_graph(int index) {
  // @@protoc_insertion_point(field_mutable:programl.ProgramGraphFeaturesList.graph)
  return graph_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::programl::ProgramGraphFeatures >*
ProgramGraphFeaturesList::mutable_graph() {
  // @@protoc_insertion_point(field_mutable_list:programl.ProgramGraphFeaturesList.graph)
  return &graph_;
}
inline const ::programl::ProgramGraphFeatures& ProgramGraphFeaturesList::_internal_graph(int index) const {
  return graph_.Get(index);
}
inline const ::programl::ProgramGraphFeatures& ProgramGraphFeaturesList::graph(int index) const {
  // @@protoc_insertion_point(field_get:programl.ProgramGraphFeaturesList.graph)
  return _internal_graph(index);
}
inline ::programl::ProgramGraphFeatures* ProgramGraphFeaturesList::_internal_add_graph() {
  return graph_.Add();
}
inline ::programl::ProgramGraphFeatures* ProgramGraphFeaturesList::add_graph() {
  // @@protoc_insertion_point(field_add:programl.ProgramGraphFeaturesList.graph)
  return _internal_add_graph();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::programl::ProgramGraphFeatures >&
ProgramGraphFeaturesList::graph() const {
  // @@protoc_insertion_point(field_list:programl.ProgramGraphFeaturesList.graph)
  return graph_;
}

// -------------------------------------------------------------------

// Ir

// .programl.Ir.Type type = 1;
inline void Ir::clear_type() {
  type_ = 0;
}
inline ::programl::Ir_Type Ir::_internal_type() const {
  return static_cast< ::programl::Ir_Type >(type_);
}
inline ::programl::Ir_Type Ir::type() const {
  // @@protoc_insertion_point(field_get:programl.Ir.type)
  return _internal_type();
}
inline void Ir::_internal_set_type(::programl::Ir_Type value) {
  
  type_ = value;
}
inline void Ir::set_type(::programl::Ir_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:programl.Ir.type)
}

// int64 compiler_version = 2;
inline void Ir::clear_compiler_version() {
  compiler_version_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Ir::_internal_compiler_version() const {
  return compiler_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Ir::compiler_version() const {
  // @@protoc_insertion_point(field_get:programl.Ir.compiler_version)
  return _internal_compiler_version();
}
inline void Ir::_internal_set_compiler_version(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  compiler_version_ = value;
}
inline void Ir::set_compiler_version(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_compiler_version(value);
  // @@protoc_insertion_point(field_set:programl.Ir.compiler_version)
}

// string cmd = 3;
inline void Ir::clear_cmd() {
  cmd_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Ir::cmd() const {
  // @@protoc_insertion_point(field_get:programl.Ir.cmd)
  return _internal_cmd();
}
inline void Ir::set_cmd(const std::string& value) {
  _internal_set_cmd(value);
  // @@protoc_insertion_point(field_set:programl.Ir.cmd)
}
inline std::string* Ir::mutable_cmd() {
  // @@protoc_insertion_point(field_mutable:programl.Ir.cmd)
  return _internal_mutable_cmd();
}
inline const std::string& Ir::_internal_cmd() const {
  return cmd_.Get();
}
inline void Ir::_internal_set_cmd(const std::string& value) {
  
  cmd_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Ir::set_cmd(std::string&& value) {
  
  cmd_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:programl.Ir.cmd)
}
inline void Ir::set_cmd(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cmd_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:programl.Ir.cmd)
}
inline void Ir::set_cmd(const char* value,
    size_t size) {
  
  cmd_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:programl.Ir.cmd)
}
inline std::string* Ir::_internal_mutable_cmd() {
  
  return cmd_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Ir::release_cmd() {
  // @@protoc_insertion_point(field_release:programl.Ir.cmd)
  return cmd_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Ir::set_allocated_cmd(std::string* cmd) {
  if (cmd != nullptr) {
    
  } else {
    
  }
  cmd_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cmd,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:programl.Ir.cmd)
}

// string text = 4;
inline void Ir::clear_text() {
  text_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Ir::text() const {
  // @@protoc_insertion_point(field_get:programl.Ir.text)
  return _internal_text();
}
inline void Ir::set_text(const std::string& value) {
  _internal_set_text(value);
  // @@protoc_insertion_point(field_set:programl.Ir.text)
}
inline std::string* Ir::mutable_text() {
  // @@protoc_insertion_point(field_mutable:programl.Ir.text)
  return _internal_mutable_text();
}
inline const std::string& Ir::_internal_text() const {
  return text_.Get();
}
inline void Ir::_internal_set_text(const std::string& value) {
  
  text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Ir::set_text(std::string&& value) {
  
  text_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:programl.Ir.text)
}
inline void Ir::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:programl.Ir.text)
}
inline void Ir::set_text(const char* value,
    size_t size) {
  
  text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:programl.Ir.text)
}
inline std::string* Ir::_internal_mutable_text() {
  
  return text_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Ir::release_text() {
  // @@protoc_insertion_point(field_release:programl.Ir.text)
  return text_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Ir::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:programl.Ir.text)
}

// -------------------------------------------------------------------

// IrList

// repeated .programl.Ir ir = 1;
inline int IrList::_internal_ir_size() const {
  return ir_.size();
}
inline int IrList::ir_size() const {
  return _internal_ir_size();
}
inline void IrList::clear_ir() {
  ir_.Clear();
}
inline ::programl::Ir* IrList::mutable_ir(int index) {
  // @@protoc_insertion_point(field_mutable:programl.IrList.ir)
  return ir_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::programl::Ir >*
IrList::mutable_ir() {
  // @@protoc_insertion_point(field_mutable_list:programl.IrList.ir)
  return &ir_;
}
inline const ::programl::Ir& IrList::_internal_ir(int index) const {
  return ir_.Get(index);
}
inline const ::programl::Ir& IrList::ir(int index) const {
  // @@protoc_insertion_point(field_get:programl.IrList.ir)
  return _internal_ir(index);
}
inline ::programl::Ir* IrList::_internal_add_ir() {
  return ir_.Add();
}
inline ::programl::Ir* IrList::add_ir() {
  // @@protoc_insertion_point(field_add:programl.IrList.ir)
  return _internal_add_ir();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::programl::Ir >&
IrList::ir() const {
  // @@protoc_insertion_point(field_list:programl.IrList.ir)
  return ir_;
}

// -------------------------------------------------------------------

// SourceFile

// .programl.SourceFile.Language language = 2;
inline void SourceFile::clear_language() {
  language_ = 0;
}
inline ::programl::SourceFile_Language SourceFile::_internal_language() const {
  return static_cast< ::programl::SourceFile_Language >(language_);
}
inline ::programl::SourceFile_Language SourceFile::language() const {
  // @@protoc_insertion_point(field_get:programl.SourceFile.language)
  return _internal_language();
}
inline void SourceFile::_internal_set_language(::programl::SourceFile_Language value) {
  
  language_ = value;
}
inline void SourceFile::set_language(::programl::SourceFile_Language value) {
  _internal_set_language(value);
  // @@protoc_insertion_point(field_set:programl.SourceFile.language)
}

// string relpath = 1;
inline void SourceFile::clear_relpath() {
  relpath_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SourceFile::relpath() const {
  // @@protoc_insertion_point(field_get:programl.SourceFile.relpath)
  return _internal_relpath();
}
inline void SourceFile::set_relpath(const std::string& value) {
  _internal_set_relpath(value);
  // @@protoc_insertion_point(field_set:programl.SourceFile.relpath)
}
inline std::string* SourceFile::mutable_relpath() {
  // @@protoc_insertion_point(field_mutable:programl.SourceFile.relpath)
  return _internal_mutable_relpath();
}
inline const std::string& SourceFile::_internal_relpath() const {
  return relpath_.Get();
}
inline void SourceFile::_internal_set_relpath(const std::string& value) {
  
  relpath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SourceFile::set_relpath(std::string&& value) {
  
  relpath_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:programl.SourceFile.relpath)
}
inline void SourceFile::set_relpath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  relpath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:programl.SourceFile.relpath)
}
inline void SourceFile::set_relpath(const char* value,
    size_t size) {
  
  relpath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:programl.SourceFile.relpath)
}
inline std::string* SourceFile::_internal_mutable_relpath() {
  
  return relpath_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SourceFile::release_relpath() {
  // @@protoc_insertion_point(field_release:programl.SourceFile.relpath)
  return relpath_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SourceFile::set_allocated_relpath(std::string* relpath) {
  if (relpath != nullptr) {
    
  } else {
    
  }
  relpath_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), relpath,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:programl.SourceFile.relpath)
}

// string text = 3;
inline void SourceFile::clear_text() {
  text_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SourceFile::text() const {
  // @@protoc_insertion_point(field_get:programl.SourceFile.text)
  return _internal_text();
}
inline void SourceFile::set_text(const std::string& value) {
  _internal_set_text(value);
  // @@protoc_insertion_point(field_set:programl.SourceFile.text)
}
inline std::string* SourceFile::mutable_text() {
  // @@protoc_insertion_point(field_mutable:programl.SourceFile.text)
  return _internal_mutable_text();
}
inline const std::string& SourceFile::_internal_text() const {
  return text_.Get();
}
inline void SourceFile::_internal_set_text(const std::string& value) {
  
  text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SourceFile::set_text(std::string&& value) {
  
  text_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:programl.SourceFile.text)
}
inline void SourceFile::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:programl.SourceFile.text)
}
inline void SourceFile::set_text(const char* value,
    size_t size) {
  
  text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:programl.SourceFile.text)
}
inline std::string* SourceFile::_internal_mutable_text() {
  
  return text_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SourceFile::release_text() {
  // @@protoc_insertion_point(field_release:programl.SourceFile.text)
  return text_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SourceFile::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:programl.SourceFile.text)
}

// -------------------------------------------------------------------

// Repo

// string url = 1;
inline void Repo::clear_url() {
  url_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Repo::url() const {
  // @@protoc_insertion_point(field_get:programl.Repo.url)
  return _internal_url();
}
inline void Repo::set_url(const std::string& value) {
  _internal_set_url(value);
  // @@protoc_insertion_point(field_set:programl.Repo.url)
}
inline std::string* Repo::mutable_url() {
  // @@protoc_insertion_point(field_mutable:programl.Repo.url)
  return _internal_mutable_url();
}
inline const std::string& Repo::_internal_url() const {
  return url_.Get();
}
inline void Repo::_internal_set_url(const std::string& value) {
  
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Repo::set_url(std::string&& value) {
  
  url_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:programl.Repo.url)
}
inline void Repo::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:programl.Repo.url)
}
inline void Repo::set_url(const char* value,
    size_t size) {
  
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:programl.Repo.url)
}
inline std::string* Repo::_internal_mutable_url() {
  
  return url_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Repo::release_url() {
  // @@protoc_insertion_point(field_release:programl.Repo.url)
  return url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Repo::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:programl.Repo.url)
}

// string sha1 = 2;
inline void Repo::clear_sha1() {
  sha1_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Repo::sha1() const {
  // @@protoc_insertion_point(field_get:programl.Repo.sha1)
  return _internal_sha1();
}
inline void Repo::set_sha1(const std::string& value) {
  _internal_set_sha1(value);
  // @@protoc_insertion_point(field_set:programl.Repo.sha1)
}
inline std::string* Repo::mutable_sha1() {
  // @@protoc_insertion_point(field_mutable:programl.Repo.sha1)
  return _internal_mutable_sha1();
}
inline const std::string& Repo::_internal_sha1() const {
  return sha1_.Get();
}
inline void Repo::_internal_set_sha1(const std::string& value) {
  
  sha1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Repo::set_sha1(std::string&& value) {
  
  sha1_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:programl.Repo.sha1)
}
inline void Repo::set_sha1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sha1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:programl.Repo.sha1)
}
inline void Repo::set_sha1(const char* value,
    size_t size) {
  
  sha1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:programl.Repo.sha1)
}
inline std::string* Repo::_internal_mutable_sha1() {
  
  return sha1_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Repo::release_sha1() {
  // @@protoc_insertion_point(field_release:programl.Repo.sha1)
  return sha1_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Repo::set_allocated_sha1(std::string* sha1) {
  if (sha1 != nullptr) {
    
  } else {
    
  }
  sha1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sha1,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:programl.Repo.sha1)
}

// int64 created_ms_timestamp = 3;
inline void Repo::clear_created_ms_timestamp() {
  created_ms_timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Repo::_internal_created_ms_timestamp() const {
  return created_ms_timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Repo::created_ms_timestamp() const {
  // @@protoc_insertion_point(field_get:programl.Repo.created_ms_timestamp)
  return _internal_created_ms_timestamp();
}
inline void Repo::_internal_set_created_ms_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  created_ms_timestamp_ = value;
}
inline void Repo::set_created_ms_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_created_ms_timestamp(value);
  // @@protoc_insertion_point(field_set:programl.Repo.created_ms_timestamp)
}

// -------------------------------------------------------------------

// NodeIndexList

// repeated int32 node = 1;
inline int NodeIndexList::_internal_node_size() const {
  return node_.size();
}
inline int NodeIndexList::node_size() const {
  return _internal_node_size();
}
inline void NodeIndexList::clear_node() {
  node_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NodeIndexList::_internal_node(int index) const {
  return node_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NodeIndexList::node(int index) const {
  // @@protoc_insertion_point(field_get:programl.NodeIndexList.node)
  return _internal_node(index);
}
inline void NodeIndexList::set_node(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  node_.Set(index, value);
  // @@protoc_insertion_point(field_set:programl.NodeIndexList.node)
}
inline void NodeIndexList::_internal_add_node(::PROTOBUF_NAMESPACE_ID::int32 value) {
  node_.Add(value);
}
inline void NodeIndexList::add_node(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_node(value);
  // @@protoc_insertion_point(field_add:programl.NodeIndexList.node)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
NodeIndexList::_internal_node() const {
  return node_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
NodeIndexList::node() const {
  // @@protoc_insertion_point(field_list:programl.NodeIndexList.node)
  return _internal_node();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
NodeIndexList::_internal_mutable_node() {
  return &node_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
NodeIndexList::mutable_node() {
  // @@protoc_insertion_point(field_mutable_list:programl.NodeIndexList.node)
  return _internal_mutable_node();
}

// -------------------------------------------------------------------

// ResultsEveryIteration

// repeated .programl.ResultOneIteration results_every_iteration = 1;
inline int ResultsEveryIteration::_internal_results_every_iteration_size() const {
  return results_every_iteration_.size();
}
inline int ResultsEveryIteration::results_every_iteration_size() const {
  return _internal_results_every_iteration_size();
}
inline void ResultsEveryIteration::clear_results_every_iteration() {
  results_every_iteration_.Clear();
}
inline ::programl::ResultOneIteration* ResultsEveryIteration::mutable_results_every_iteration(int index) {
  // @@protoc_insertion_point(field_mutable:programl.ResultsEveryIteration.results_every_iteration)
  return results_every_iteration_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::programl::ResultOneIteration >*
ResultsEveryIteration::mutable_results_every_iteration() {
  // @@protoc_insertion_point(field_mutable_list:programl.ResultsEveryIteration.results_every_iteration)
  return &results_every_iteration_;
}
inline const ::programl::ResultOneIteration& ResultsEveryIteration::_internal_results_every_iteration(int index) const {
  return results_every_iteration_.Get(index);
}
inline const ::programl::ResultOneIteration& ResultsEveryIteration::results_every_iteration(int index) const {
  // @@protoc_insertion_point(field_get:programl.ResultsEveryIteration.results_every_iteration)
  return _internal_results_every_iteration(index);
}
inline ::programl::ResultOneIteration* ResultsEveryIteration::_internal_add_results_every_iteration() {
  return results_every_iteration_.Add();
}
inline ::programl::ResultOneIteration* ResultsEveryIteration::add_results_every_iteration() {
  // @@protoc_insertion_point(field_add:programl.ResultsEveryIteration.results_every_iteration)
  return _internal_add_results_every_iteration();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::programl::ResultOneIteration >&
ResultsEveryIteration::results_every_iteration() const {
  // @@protoc_insertion_point(field_list:programl.ResultsEveryIteration.results_every_iteration)
  return results_every_iteration_;
}

// .programl.Int64List program_points = 2;
inline bool ResultsEveryIteration::_internal_has_program_points() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || program_points_ != nullptr);
  return value;
}
inline bool ResultsEveryIteration::has_program_points() const {
  return _internal_has_program_points();
}
inline const ::programl::Int64List& ResultsEveryIteration::_internal_program_points() const {
  const ::programl::Int64List* p = program_points_;
  return p != nullptr ? *p : *reinterpret_cast<const ::programl::Int64List*>(
      &::programl::_Int64List_default_instance_);
}
inline const ::programl::Int64List& ResultsEveryIteration::program_points() const {
  // @@protoc_insertion_point(field_get:programl.ResultsEveryIteration.program_points)
  return _internal_program_points();
}
inline void ResultsEveryIteration::unsafe_arena_set_allocated_program_points(
    ::programl::Int64List* program_points) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(program_points_);
  }
  program_points_ = program_points;
  if (program_points) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:programl.ResultsEveryIteration.program_points)
}
inline ::programl::Int64List* ResultsEveryIteration::release_program_points() {
  _has_bits_[0] &= ~0x00000002u;
  ::programl::Int64List* temp = program_points_;
  program_points_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::programl::Int64List* ResultsEveryIteration::unsafe_arena_release_program_points() {
  // @@protoc_insertion_point(field_release:programl.ResultsEveryIteration.program_points)
  _has_bits_[0] &= ~0x00000002u;
  ::programl::Int64List* temp = program_points_;
  program_points_ = nullptr;
  return temp;
}
inline ::programl::Int64List* ResultsEveryIteration::_internal_mutable_program_points() {
  _has_bits_[0] |= 0x00000002u;
  if (program_points_ == nullptr) {
    auto* p = CreateMaybeMessage<::programl::Int64List>(GetArena());
    program_points_ = p;
  }
  return program_points_;
}
inline ::programl::Int64List* ResultsEveryIteration::mutable_program_points() {
  // @@protoc_insertion_point(field_mutable:programl.ResultsEveryIteration.program_points)
  return _internal_mutable_program_points();
}
inline void ResultsEveryIteration::set_allocated_program_points(::programl::Int64List* program_points) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(program_points_);
  }
  if (program_points) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(program_points)->GetArena();
    if (message_arena != submessage_arena) {
      program_points = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, program_points, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  program_points_ = program_points;
  // @@protoc_insertion_point(field_set_allocated:programl.ResultsEveryIteration.program_points)
}

// .programl.Int64List interested_points = 3;
inline bool ResultsEveryIteration::_internal_has_interested_points() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || interested_points_ != nullptr);
  return value;
}
inline bool ResultsEveryIteration::has_interested_points() const {
  return _internal_has_interested_points();
}
inline const ::programl::Int64List& ResultsEveryIteration::_internal_interested_points() const {
  const ::programl::Int64List* p = interested_points_;
  return p != nullptr ? *p : *reinterpret_cast<const ::programl::Int64List*>(
      &::programl::_Int64List_default_instance_);
}
inline const ::programl::Int64List& ResultsEveryIteration::interested_points() const {
  // @@protoc_insertion_point(field_get:programl.ResultsEveryIteration.interested_points)
  return _internal_interested_points();
}
inline void ResultsEveryIteration::unsafe_arena_set_allocated_interested_points(
    ::programl::Int64List* interested_points) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(interested_points_);
  }
  interested_points_ = interested_points;
  if (interested_points) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:programl.ResultsEveryIteration.interested_points)
}
inline ::programl::Int64List* ResultsEveryIteration::release_interested_points() {
  _has_bits_[0] &= ~0x00000004u;
  ::programl::Int64List* temp = interested_points_;
  interested_points_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::programl::Int64List* ResultsEveryIteration::unsafe_arena_release_interested_points() {
  // @@protoc_insertion_point(field_release:programl.ResultsEveryIteration.interested_points)
  _has_bits_[0] &= ~0x00000004u;
  ::programl::Int64List* temp = interested_points_;
  interested_points_ = nullptr;
  return temp;
}
inline ::programl::Int64List* ResultsEveryIteration::_internal_mutable_interested_points() {
  _has_bits_[0] |= 0x00000004u;
  if (interested_points_ == nullptr) {
    auto* p = CreateMaybeMessage<::programl::Int64List>(GetArena());
    interested_points_ = p;
  }
  return interested_points_;
}
inline ::programl::Int64List* ResultsEveryIteration::mutable_interested_points() {
  // @@protoc_insertion_point(field_mutable:programl.ResultsEveryIteration.interested_points)
  return _internal_mutable_interested_points();
}
inline void ResultsEveryIteration::set_allocated_interested_points(::programl::Int64List* interested_points) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(interested_points_);
  }
  if (interested_points) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(interested_points)->GetArena();
    if (message_arena != submessage_arena) {
      interested_points = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, interested_points, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  interested_points_ = interested_points;
  // @@protoc_insertion_point(field_set_allocated:programl.ResultsEveryIteration.interested_points)
}

// string task_name = 4;
inline bool ResultsEveryIteration::_internal_has_task_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ResultsEveryIteration::has_task_name() const {
  return _internal_has_task_name();
}
inline void ResultsEveryIteration::clear_task_name() {
  task_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ResultsEveryIteration::task_name() const {
  // @@protoc_insertion_point(field_get:programl.ResultsEveryIteration.task_name)
  return _internal_task_name();
}
inline void ResultsEveryIteration::set_task_name(const std::string& value) {
  _internal_set_task_name(value);
  // @@protoc_insertion_point(field_set:programl.ResultsEveryIteration.task_name)
}
inline std::string* ResultsEveryIteration::mutable_task_name() {
  // @@protoc_insertion_point(field_mutable:programl.ResultsEveryIteration.task_name)
  return _internal_mutable_task_name();
}
inline const std::string& ResultsEveryIteration::_internal_task_name() const {
  return task_name_.Get();
}
inline void ResultsEveryIteration::_internal_set_task_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  task_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ResultsEveryIteration::set_task_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  task_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:programl.ResultsEveryIteration.task_name)
}
inline void ResultsEveryIteration::set_task_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  task_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:programl.ResultsEveryIteration.task_name)
}
inline void ResultsEveryIteration::set_task_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  task_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:programl.ResultsEveryIteration.task_name)
}
inline std::string* ResultsEveryIteration::_internal_mutable_task_name() {
  _has_bits_[0] |= 0x00000001u;
  return task_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ResultsEveryIteration::release_task_name() {
  // @@protoc_insertion_point(field_release:programl.ResultsEveryIteration.task_name)
  if (!_internal_has_task_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return task_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResultsEveryIteration::set_allocated_task_name(std::string* task_name) {
  if (task_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  task_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), task_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:programl.ResultsEveryIteration.task_name)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ResultOneIteration

// map<int64, .programl.Int64List> result_map = 1;
inline int ResultOneIteration::_internal_result_map_size() const {
  return result_map_.size();
}
inline int ResultOneIteration::result_map_size() const {
  return _internal_result_map_size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::programl::Int64List >&
ResultOneIteration::_internal_result_map() const {
  return result_map_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::programl::Int64List >&
ResultOneIteration::result_map() const {
  // @@protoc_insertion_point(field_map:programl.ResultOneIteration.result_map)
  return _internal_result_map();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::programl::Int64List >*
ResultOneIteration::_internal_mutable_result_map() {
  return result_map_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::programl::Int64List >*
ResultOneIteration::mutable_result_map() {
  // @@protoc_insertion_point(field_mutable_map:programl.ResultOneIteration.result_map)
  return _internal_mutable_result_map();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace programl

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::programl::Ir_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::programl::Ir_Type>() {
  return ::programl::Ir_Type_descriptor();
}
template <> struct is_proto_enum< ::programl::SourceFile_Language> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::programl::SourceFile_Language>() {
  return ::programl::SourceFile_Language_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_util_2eproto
