// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: util.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_util_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_util_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "program_graph.pb.h"
#include "features.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_util_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_util_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_util_2eproto;
namespace programl {
class Ir;
struct IrDefaultTypeInternal;
extern IrDefaultTypeInternal _Ir_default_instance_;
class IrList;
struct IrListDefaultTypeInternal;
extern IrListDefaultTypeInternal _IrList_default_instance_;
class NodeIndexList;
struct NodeIndexListDefaultTypeInternal;
extern NodeIndexListDefaultTypeInternal _NodeIndexList_default_instance_;
class ProgramGraphFeatures;
struct ProgramGraphFeaturesDefaultTypeInternal;
extern ProgramGraphFeaturesDefaultTypeInternal _ProgramGraphFeatures_default_instance_;
class ProgramGraphFeaturesList;
struct ProgramGraphFeaturesListDefaultTypeInternal;
extern ProgramGraphFeaturesListDefaultTypeInternal _ProgramGraphFeaturesList_default_instance_;
class ProgramGraphList;
struct ProgramGraphListDefaultTypeInternal;
extern ProgramGraphListDefaultTypeInternal _ProgramGraphList_default_instance_;
class ProgramGraphOptions;
struct ProgramGraphOptionsDefaultTypeInternal;
extern ProgramGraphOptionsDefaultTypeInternal _ProgramGraphOptions_default_instance_;
class Repo;
struct RepoDefaultTypeInternal;
extern RepoDefaultTypeInternal _Repo_default_instance_;
class SourceFile;
struct SourceFileDefaultTypeInternal;
extern SourceFileDefaultTypeInternal _SourceFile_default_instance_;
}  // namespace programl
PROTOBUF_NAMESPACE_OPEN
template<> ::programl::Ir* Arena::CreateMaybeMessage<::programl::Ir>(Arena*);
template<> ::programl::IrList* Arena::CreateMaybeMessage<::programl::IrList>(Arena*);
template<> ::programl::NodeIndexList* Arena::CreateMaybeMessage<::programl::NodeIndexList>(Arena*);
template<> ::programl::ProgramGraphFeatures* Arena::CreateMaybeMessage<::programl::ProgramGraphFeatures>(Arena*);
template<> ::programl::ProgramGraphFeaturesList* Arena::CreateMaybeMessage<::programl::ProgramGraphFeaturesList>(Arena*);
template<> ::programl::ProgramGraphList* Arena::CreateMaybeMessage<::programl::ProgramGraphList>(Arena*);
template<> ::programl::ProgramGraphOptions* Arena::CreateMaybeMessage<::programl::ProgramGraphOptions>(Arena*);
template<> ::programl::Repo* Arena::CreateMaybeMessage<::programl::Repo>(Arena*);
template<> ::programl::SourceFile* Arena::CreateMaybeMessage<::programl::SourceFile>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace programl {

enum Ir_Type : int {
  Ir_Type_UNKNOWN = 0,
  Ir_Type_LLVM = 1,
  Ir_Type_XLA_HLO = 2,
  Ir_Type_Ir_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Ir_Type_Ir_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Ir_Type_IsValid(int value);
constexpr Ir_Type Ir_Type_Type_MIN = Ir_Type_UNKNOWN;
constexpr Ir_Type Ir_Type_Type_MAX = Ir_Type_XLA_HLO;
constexpr int Ir_Type_Type_ARRAYSIZE = Ir_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Ir_Type_descriptor();
template<typename T>
inline const std::string& Ir_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Ir_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Ir_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Ir_Type_descriptor(), enum_t_value);
}
inline bool Ir_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Ir_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Ir_Type>(
    Ir_Type_descriptor(), name, value);
}
enum SourceFile_Language : int {
  SourceFile_Language_UNKNOWN = 0,
  SourceFile_Language_C = 1,
  SourceFile_Language_CXX = 2,
  SourceFile_Language_OPENCL = 3,
  SourceFile_Language_SWIFT = 4,
  SourceFile_Language_HASKELL = 5,
  SourceFile_Language_FORTRAN = 6,
  SourceFile_Language_SourceFile_Language_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SourceFile_Language_SourceFile_Language_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SourceFile_Language_IsValid(int value);
constexpr SourceFile_Language SourceFile_Language_Language_MIN = SourceFile_Language_UNKNOWN;
constexpr SourceFile_Language SourceFile_Language_Language_MAX = SourceFile_Language_FORTRAN;
constexpr int SourceFile_Language_Language_ARRAYSIZE = SourceFile_Language_Language_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SourceFile_Language_descriptor();
template<typename T>
inline const std::string& SourceFile_Language_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SourceFile_Language>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SourceFile_Language_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SourceFile_Language_descriptor(), enum_t_value);
}
inline bool SourceFile_Language_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SourceFile_Language* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SourceFile_Language>(
    SourceFile_Language_descriptor(), name, value);
}
// ===================================================================

class ProgramGraphList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:programl.ProgramGraphList) */ {
 public:
  inline ProgramGraphList() : ProgramGraphList(nullptr) {}
  ~ProgramGraphList() override;
  explicit PROTOBUF_CONSTEXPR ProgramGraphList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProgramGraphList(const ProgramGraphList& from);
  ProgramGraphList(ProgramGraphList&& from) noexcept
    : ProgramGraphList() {
    *this = ::std::move(from);
  }

  inline ProgramGraphList& operator=(const ProgramGraphList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProgramGraphList& operator=(ProgramGraphList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProgramGraphList& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProgramGraphList* internal_default_instance() {
    return reinterpret_cast<const ProgramGraphList*>(
               &_ProgramGraphList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ProgramGraphList& a, ProgramGraphList& b) {
    a.Swap(&b);
  }
  inline void Swap(ProgramGraphList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProgramGraphList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProgramGraphList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProgramGraphList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProgramGraphList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ProgramGraphList& from) {
    ProgramGraphList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProgramGraphList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "programl.ProgramGraphList";
  }
  protected:
  explicit ProgramGraphList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGraphFieldNumber = 2,
    kContextFieldNumber = 1,
  };
  // repeated .programl.ProgramGraph graph = 2;
  int graph_size() const;
  private:
  int _internal_graph_size() const;
  public:
  void clear_graph();
  ::programl::ProgramGraph* mutable_graph(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::programl::ProgramGraph >*
      mutable_graph();
  private:
  const ::programl::ProgramGraph& _internal_graph(int index) const;
  ::programl::ProgramGraph* _internal_add_graph();
  public:
  const ::programl::ProgramGraph& graph(int index) const;
  ::programl::ProgramGraph* add_graph();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::programl::ProgramGraph >&
      graph() const;

  // .programl.Features context = 1;
  bool has_context() const;
  private:
  bool _internal_has_context() const;
  public:
  void clear_context();
  const ::programl::Features& context() const;
  PROTOBUF_NODISCARD ::programl::Features* release_context();
  ::programl::Features* mutable_context();
  void set_allocated_context(::programl::Features* context);
  private:
  const ::programl::Features& _internal_context() const;
  ::programl::Features* _internal_mutable_context();
  public:
  void unsafe_arena_set_allocated_context(
      ::programl::Features* context);
  ::programl::Features* unsafe_arena_release_context();

  // @@protoc_insertion_point(class_scope:programl.ProgramGraphList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::programl::ProgramGraph > graph_;
    ::programl::Features* context_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_util_2eproto;
};
// -------------------------------------------------------------------

class ProgramGraphOptions final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:programl.ProgramGraphOptions) */ {
 public:
  inline ProgramGraphOptions() : ProgramGraphOptions(nullptr) {}
  ~ProgramGraphOptions() override;
  explicit PROTOBUF_CONSTEXPR ProgramGraphOptions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProgramGraphOptions(const ProgramGraphOptions& from);
  ProgramGraphOptions(ProgramGraphOptions&& from) noexcept
    : ProgramGraphOptions() {
    *this = ::std::move(from);
  }

  inline ProgramGraphOptions& operator=(const ProgramGraphOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProgramGraphOptions& operator=(ProgramGraphOptions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProgramGraphOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProgramGraphOptions* internal_default_instance() {
    return reinterpret_cast<const ProgramGraphOptions*>(
               &_ProgramGraphOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ProgramGraphOptions& a, ProgramGraphOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(ProgramGraphOptions* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProgramGraphOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProgramGraphOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProgramGraphOptions>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProgramGraphOptions& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ProgramGraphOptions& from) {
    ProgramGraphOptions::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProgramGraphOptions* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "programl.ProgramGraphOptions";
  }
  protected:
  explicit ProgramGraphOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIrPathFieldNumber = 10,
    kStrictFieldNumber = 3,
    kInstructionsOnlyFieldNumber = 1,
    kIgnoreCallReturnsFieldNumber = 2,
    kOptLevelFieldNumber = 4,
  };
  // string ir_path = 10;
  void clear_ir_path();
  const std::string& ir_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ir_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ir_path();
  PROTOBUF_NODISCARD std::string* release_ir_path();
  void set_allocated_ir_path(std::string* ir_path);
  private:
  const std::string& _internal_ir_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ir_path(const std::string& value);
  std::string* _internal_mutable_ir_path();
  public:

  // bool strict = 3;
  void clear_strict();
  bool strict() const;
  void set_strict(bool value);
  private:
  bool _internal_strict() const;
  void _internal_set_strict(bool value);
  public:

  // bool instructions_only = 1;
  void clear_instructions_only();
  bool instructions_only() const;
  void set_instructions_only(bool value);
  private:
  bool _internal_instructions_only() const;
  void _internal_set_instructions_only(bool value);
  public:

  // bool ignore_call_returns = 2;
  void clear_ignore_call_returns();
  bool ignore_call_returns() const;
  void set_ignore_call_returns(bool value);
  private:
  bool _internal_ignore_call_returns() const;
  void _internal_set_ignore_call_returns(bool value);
  public:

  // int32 opt_level = 4;
  void clear_opt_level();
  int32_t opt_level() const;
  void set_opt_level(int32_t value);
  private:
  int32_t _internal_opt_level() const;
  void _internal_set_opt_level(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:programl.ProgramGraphOptions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ir_path_;
    bool strict_;
    bool instructions_only_;
    bool ignore_call_returns_;
    int32_t opt_level_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_util_2eproto;
};
// -------------------------------------------------------------------

class ProgramGraphFeatures final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:programl.ProgramGraphFeatures) */ {
 public:
  inline ProgramGraphFeatures() : ProgramGraphFeatures(nullptr) {}
  ~ProgramGraphFeatures() override;
  explicit PROTOBUF_CONSTEXPR ProgramGraphFeatures(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProgramGraphFeatures(const ProgramGraphFeatures& from);
  ProgramGraphFeatures(ProgramGraphFeatures&& from) noexcept
    : ProgramGraphFeatures() {
    *this = ::std::move(from);
  }

  inline ProgramGraphFeatures& operator=(const ProgramGraphFeatures& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProgramGraphFeatures& operator=(ProgramGraphFeatures&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProgramGraphFeatures& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProgramGraphFeatures* internal_default_instance() {
    return reinterpret_cast<const ProgramGraphFeatures*>(
               &_ProgramGraphFeatures_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ProgramGraphFeatures& a, ProgramGraphFeatures& b) {
    a.Swap(&b);
  }
  inline void Swap(ProgramGraphFeatures* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProgramGraphFeatures* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProgramGraphFeatures* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProgramGraphFeatures>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProgramGraphFeatures& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ProgramGraphFeatures& from) {
    ProgramGraphFeatures::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProgramGraphFeatures* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "programl.ProgramGraphFeatures";
  }
  protected:
  explicit ProgramGraphFeatures(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeFeaturesFieldNumber = 1,
    kEdgeFeaturesFieldNumber = 2,
    kFunctionFeaturesFieldNumber = 3,
    kModuleFeaturesFieldNumber = 4,
    kFeaturesFieldNumber = 5,
  };
  // .programl.FeatureLists node_features = 1;
  bool has_node_features() const;
  private:
  bool _internal_has_node_features() const;
  public:
  void clear_node_features();
  const ::programl::FeatureLists& node_features() const;
  PROTOBUF_NODISCARD ::programl::FeatureLists* release_node_features();
  ::programl::FeatureLists* mutable_node_features();
  void set_allocated_node_features(::programl::FeatureLists* node_features);
  private:
  const ::programl::FeatureLists& _internal_node_features() const;
  ::programl::FeatureLists* _internal_mutable_node_features();
  public:
  void unsafe_arena_set_allocated_node_features(
      ::programl::FeatureLists* node_features);
  ::programl::FeatureLists* unsafe_arena_release_node_features();

  // .programl.FeatureLists edge_features = 2;
  bool has_edge_features() const;
  private:
  bool _internal_has_edge_features() const;
  public:
  void clear_edge_features();
  const ::programl::FeatureLists& edge_features() const;
  PROTOBUF_NODISCARD ::programl::FeatureLists* release_edge_features();
  ::programl::FeatureLists* mutable_edge_features();
  void set_allocated_edge_features(::programl::FeatureLists* edge_features);
  private:
  const ::programl::FeatureLists& _internal_edge_features() const;
  ::programl::FeatureLists* _internal_mutable_edge_features();
  public:
  void unsafe_arena_set_allocated_edge_features(
      ::programl::FeatureLists* edge_features);
  ::programl::FeatureLists* unsafe_arena_release_edge_features();

  // .programl.FeatureLists function_features = 3;
  bool has_function_features() const;
  private:
  bool _internal_has_function_features() const;
  public:
  void clear_function_features();
  const ::programl::FeatureLists& function_features() const;
  PROTOBUF_NODISCARD ::programl::FeatureLists* release_function_features();
  ::programl::FeatureLists* mutable_function_features();
  void set_allocated_function_features(::programl::FeatureLists* function_features);
  private:
  const ::programl::FeatureLists& _internal_function_features() const;
  ::programl::FeatureLists* _internal_mutable_function_features();
  public:
  void unsafe_arena_set_allocated_function_features(
      ::programl::FeatureLists* function_features);
  ::programl::FeatureLists* unsafe_arena_release_function_features();

  // .programl.FeatureLists module_features = 4;
  bool has_module_features() const;
  private:
  bool _internal_has_module_features() const;
  public:
  void clear_module_features();
  const ::programl::FeatureLists& module_features() const;
  PROTOBUF_NODISCARD ::programl::FeatureLists* release_module_features();
  ::programl::FeatureLists* mutable_module_features();
  void set_allocated_module_features(::programl::FeatureLists* module_features);
  private:
  const ::programl::FeatureLists& _internal_module_features() const;
  ::programl::FeatureLists* _internal_mutable_module_features();
  public:
  void unsafe_arena_set_allocated_module_features(
      ::programl::FeatureLists* module_features);
  ::programl::FeatureLists* unsafe_arena_release_module_features();

  // .programl.Features features = 5;
  bool has_features() const;
  private:
  bool _internal_has_features() const;
  public:
  void clear_features();
  const ::programl::Features& features() const;
  PROTOBUF_NODISCARD ::programl::Features* release_features();
  ::programl::Features* mutable_features();
  void set_allocated_features(::programl::Features* features);
  private:
  const ::programl::Features& _internal_features() const;
  ::programl::Features* _internal_mutable_features();
  public:
  void unsafe_arena_set_allocated_features(
      ::programl::Features* features);
  ::programl::Features* unsafe_arena_release_features();

  // @@protoc_insertion_point(class_scope:programl.ProgramGraphFeatures)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::programl::FeatureLists* node_features_;
    ::programl::FeatureLists* edge_features_;
    ::programl::FeatureLists* function_features_;
    ::programl::FeatureLists* module_features_;
    ::programl::Features* features_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_util_2eproto;
};
// -------------------------------------------------------------------

class ProgramGraphFeaturesList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:programl.ProgramGraphFeaturesList) */ {
 public:
  inline ProgramGraphFeaturesList() : ProgramGraphFeaturesList(nullptr) {}
  ~ProgramGraphFeaturesList() override;
  explicit PROTOBUF_CONSTEXPR ProgramGraphFeaturesList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProgramGraphFeaturesList(const ProgramGraphFeaturesList& from);
  ProgramGraphFeaturesList(ProgramGraphFeaturesList&& from) noexcept
    : ProgramGraphFeaturesList() {
    *this = ::std::move(from);
  }

  inline ProgramGraphFeaturesList& operator=(const ProgramGraphFeaturesList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProgramGraphFeaturesList& operator=(ProgramGraphFeaturesList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProgramGraphFeaturesList& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProgramGraphFeaturesList* internal_default_instance() {
    return reinterpret_cast<const ProgramGraphFeaturesList*>(
               &_ProgramGraphFeaturesList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ProgramGraphFeaturesList& a, ProgramGraphFeaturesList& b) {
    a.Swap(&b);
  }
  inline void Swap(ProgramGraphFeaturesList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProgramGraphFeaturesList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProgramGraphFeaturesList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProgramGraphFeaturesList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProgramGraphFeaturesList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ProgramGraphFeaturesList& from) {
    ProgramGraphFeaturesList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProgramGraphFeaturesList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "programl.ProgramGraphFeaturesList";
  }
  protected:
  explicit ProgramGraphFeaturesList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGraphFieldNumber = 2,
    kContextFieldNumber = 1,
  };
  // repeated .programl.ProgramGraphFeatures graph = 2;
  int graph_size() const;
  private:
  int _internal_graph_size() const;
  public:
  void clear_graph();
  ::programl::ProgramGraphFeatures* mutable_graph(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::programl::ProgramGraphFeatures >*
      mutable_graph();
  private:
  const ::programl::ProgramGraphFeatures& _internal_graph(int index) const;
  ::programl::ProgramGraphFeatures* _internal_add_graph();
  public:
  const ::programl::ProgramGraphFeatures& graph(int index) const;
  ::programl::ProgramGraphFeatures* add_graph();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::programl::ProgramGraphFeatures >&
      graph() const;

  // .programl.Features context = 1;
  bool has_context() const;
  private:
  bool _internal_has_context() const;
  public:
  void clear_context();
  const ::programl::Features& context() const;
  PROTOBUF_NODISCARD ::programl::Features* release_context();
  ::programl::Features* mutable_context();
  void set_allocated_context(::programl::Features* context);
  private:
  const ::programl::Features& _internal_context() const;
  ::programl::Features* _internal_mutable_context();
  public:
  void unsafe_arena_set_allocated_context(
      ::programl::Features* context);
  ::programl::Features* unsafe_arena_release_context();

  // @@protoc_insertion_point(class_scope:programl.ProgramGraphFeaturesList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::programl::ProgramGraphFeatures > graph_;
    ::programl::Features* context_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_util_2eproto;
};
// -------------------------------------------------------------------

class Ir final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:programl.Ir) */ {
 public:
  inline Ir() : Ir(nullptr) {}
  ~Ir() override;
  explicit PROTOBUF_CONSTEXPR Ir(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ir(const Ir& from);
  Ir(Ir&& from) noexcept
    : Ir() {
    *this = ::std::move(from);
  }

  inline Ir& operator=(const Ir& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ir& operator=(Ir&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ir& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ir* internal_default_instance() {
    return reinterpret_cast<const Ir*>(
               &_Ir_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Ir& a, Ir& b) {
    a.Swap(&b);
  }
  inline void Swap(Ir* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ir* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ir* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ir>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ir& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ir& from) {
    Ir::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ir* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "programl.Ir";
  }
  protected:
  explicit Ir(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Ir_Type Type;
  static constexpr Type UNKNOWN =
    Ir_Type_UNKNOWN;
  static constexpr Type LLVM =
    Ir_Type_LLVM;
  static constexpr Type XLA_HLO =
    Ir_Type_XLA_HLO;
  static inline bool Type_IsValid(int value) {
    return Ir_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    Ir_Type_Type_MIN;
  static constexpr Type Type_MAX =
    Ir_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    Ir_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return Ir_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return Ir_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return Ir_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCmdFieldNumber = 3,
    kTextFieldNumber = 4,
    kCompilerVersionFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // string cmd = 3;
  void clear_cmd();
  const std::string& cmd() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cmd(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cmd();
  PROTOBUF_NODISCARD std::string* release_cmd();
  void set_allocated_cmd(std::string* cmd);
  private:
  const std::string& _internal_cmd() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cmd(const std::string& value);
  std::string* _internal_mutable_cmd();
  public:

  // string text = 4;
  void clear_text();
  const std::string& text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // int64 compiler_version = 2;
  void clear_compiler_version();
  int64_t compiler_version() const;
  void set_compiler_version(int64_t value);
  private:
  int64_t _internal_compiler_version() const;
  void _internal_set_compiler_version(int64_t value);
  public:

  // .programl.Ir.Type type = 1;
  void clear_type();
  ::programl::Ir_Type type() const;
  void set_type(::programl::Ir_Type value);
  private:
  ::programl::Ir_Type _internal_type() const;
  void _internal_set_type(::programl::Ir_Type value);
  public:

  // @@protoc_insertion_point(class_scope:programl.Ir)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cmd_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
    int64_t compiler_version_;
    int type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_util_2eproto;
};
// -------------------------------------------------------------------

class IrList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:programl.IrList) */ {
 public:
  inline IrList() : IrList(nullptr) {}
  ~IrList() override;
  explicit PROTOBUF_CONSTEXPR IrList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IrList(const IrList& from);
  IrList(IrList&& from) noexcept
    : IrList() {
    *this = ::std::move(from);
  }

  inline IrList& operator=(const IrList& from) {
    CopyFrom(from);
    return *this;
  }
  inline IrList& operator=(IrList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IrList& default_instance() {
    return *internal_default_instance();
  }
  static inline const IrList* internal_default_instance() {
    return reinterpret_cast<const IrList*>(
               &_IrList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(IrList& a, IrList& b) {
    a.Swap(&b);
  }
  inline void Swap(IrList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IrList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IrList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IrList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IrList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const IrList& from) {
    IrList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IrList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "programl.IrList";
  }
  protected:
  explicit IrList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIrFieldNumber = 1,
  };
  // repeated .programl.Ir ir = 1;
  int ir_size() const;
  private:
  int _internal_ir_size() const;
  public:
  void clear_ir();
  ::programl::Ir* mutable_ir(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::programl::Ir >*
      mutable_ir();
  private:
  const ::programl::Ir& _internal_ir(int index) const;
  ::programl::Ir* _internal_add_ir();
  public:
  const ::programl::Ir& ir(int index) const;
  ::programl::Ir* add_ir();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::programl::Ir >&
      ir() const;

  // @@protoc_insertion_point(class_scope:programl.IrList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::programl::Ir > ir_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_util_2eproto;
};
// -------------------------------------------------------------------

class SourceFile final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:programl.SourceFile) */ {
 public:
  inline SourceFile() : SourceFile(nullptr) {}
  ~SourceFile() override;
  explicit PROTOBUF_CONSTEXPR SourceFile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SourceFile(const SourceFile& from);
  SourceFile(SourceFile&& from) noexcept
    : SourceFile() {
    *this = ::std::move(from);
  }

  inline SourceFile& operator=(const SourceFile& from) {
    CopyFrom(from);
    return *this;
  }
  inline SourceFile& operator=(SourceFile&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SourceFile& default_instance() {
    return *internal_default_instance();
  }
  static inline const SourceFile* internal_default_instance() {
    return reinterpret_cast<const SourceFile*>(
               &_SourceFile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SourceFile& a, SourceFile& b) {
    a.Swap(&b);
  }
  inline void Swap(SourceFile* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SourceFile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SourceFile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SourceFile>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SourceFile& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SourceFile& from) {
    SourceFile::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SourceFile* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "programl.SourceFile";
  }
  protected:
  explicit SourceFile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SourceFile_Language Language;
  static constexpr Language UNKNOWN =
    SourceFile_Language_UNKNOWN;
  static constexpr Language C =
    SourceFile_Language_C;
  static constexpr Language CXX =
    SourceFile_Language_CXX;
  static constexpr Language OPENCL =
    SourceFile_Language_OPENCL;
  static constexpr Language SWIFT =
    SourceFile_Language_SWIFT;
  static constexpr Language HASKELL =
    SourceFile_Language_HASKELL;
  static constexpr Language FORTRAN =
    SourceFile_Language_FORTRAN;
  static inline bool Language_IsValid(int value) {
    return SourceFile_Language_IsValid(value);
  }
  static constexpr Language Language_MIN =
    SourceFile_Language_Language_MIN;
  static constexpr Language Language_MAX =
    SourceFile_Language_Language_MAX;
  static constexpr int Language_ARRAYSIZE =
    SourceFile_Language_Language_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Language_descriptor() {
    return SourceFile_Language_descriptor();
  }
  template<typename T>
  static inline const std::string& Language_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Language>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Language_Name.");
    return SourceFile_Language_Name(enum_t_value);
  }
  static inline bool Language_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Language* value) {
    return SourceFile_Language_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRelpathFieldNumber = 1,
    kTextFieldNumber = 3,
    kLanguageFieldNumber = 2,
  };
  // string relpath = 1;
  void clear_relpath();
  const std::string& relpath() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_relpath(ArgT0&& arg0, ArgT... args);
  std::string* mutable_relpath();
  PROTOBUF_NODISCARD std::string* release_relpath();
  void set_allocated_relpath(std::string* relpath);
  private:
  const std::string& _internal_relpath() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_relpath(const std::string& value);
  std::string* _internal_mutable_relpath();
  public:

  // string text = 3;
  void clear_text();
  const std::string& text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // .programl.SourceFile.Language language = 2;
  void clear_language();
  ::programl::SourceFile_Language language() const;
  void set_language(::programl::SourceFile_Language value);
  private:
  ::programl::SourceFile_Language _internal_language() const;
  void _internal_set_language(::programl::SourceFile_Language value);
  public:

  // @@protoc_insertion_point(class_scope:programl.SourceFile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr relpath_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
    int language_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_util_2eproto;
};
// -------------------------------------------------------------------

class Repo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:programl.Repo) */ {
 public:
  inline Repo() : Repo(nullptr) {}
  ~Repo() override;
  explicit PROTOBUF_CONSTEXPR Repo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Repo(const Repo& from);
  Repo(Repo&& from) noexcept
    : Repo() {
    *this = ::std::move(from);
  }

  inline Repo& operator=(const Repo& from) {
    CopyFrom(from);
    return *this;
  }
  inline Repo& operator=(Repo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Repo& default_instance() {
    return *internal_default_instance();
  }
  static inline const Repo* internal_default_instance() {
    return reinterpret_cast<const Repo*>(
               &_Repo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Repo& a, Repo& b) {
    a.Swap(&b);
  }
  inline void Swap(Repo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Repo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Repo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Repo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Repo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Repo& from) {
    Repo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Repo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "programl.Repo";
  }
  protected:
  explicit Repo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 1,
    kSha1FieldNumber = 2,
    kCreatedMsTimestampFieldNumber = 3,
  };
  // string url = 1;
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // string sha1 = 2;
  void clear_sha1();
  const std::string& sha1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sha1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sha1();
  PROTOBUF_NODISCARD std::string* release_sha1();
  void set_allocated_sha1(std::string* sha1);
  private:
  const std::string& _internal_sha1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sha1(const std::string& value);
  std::string* _internal_mutable_sha1();
  public:

  // int64 created_ms_timestamp = 3;
  void clear_created_ms_timestamp();
  int64_t created_ms_timestamp() const;
  void set_created_ms_timestamp(int64_t value);
  private:
  int64_t _internal_created_ms_timestamp() const;
  void _internal_set_created_ms_timestamp(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:programl.Repo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sha1_;
    int64_t created_ms_timestamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_util_2eproto;
};
// -------------------------------------------------------------------

class NodeIndexList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:programl.NodeIndexList) */ {
 public:
  inline NodeIndexList() : NodeIndexList(nullptr) {}
  ~NodeIndexList() override;
  explicit PROTOBUF_CONSTEXPR NodeIndexList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NodeIndexList(const NodeIndexList& from);
  NodeIndexList(NodeIndexList&& from) noexcept
    : NodeIndexList() {
    *this = ::std::move(from);
  }

  inline NodeIndexList& operator=(const NodeIndexList& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeIndexList& operator=(NodeIndexList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NodeIndexList& default_instance() {
    return *internal_default_instance();
  }
  static inline const NodeIndexList* internal_default_instance() {
    return reinterpret_cast<const NodeIndexList*>(
               &_NodeIndexList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(NodeIndexList& a, NodeIndexList& b) {
    a.Swap(&b);
  }
  inline void Swap(NodeIndexList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NodeIndexList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NodeIndexList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NodeIndexList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NodeIndexList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NodeIndexList& from) {
    NodeIndexList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeIndexList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "programl.NodeIndexList";
  }
  protected:
  explicit NodeIndexList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeFieldNumber = 1,
  };
  // repeated int32 node = 1;
  int node_size() const;
  private:
  int _internal_node_size() const;
  public:
  void clear_node();
  private:
  int32_t _internal_node(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_node() const;
  void _internal_add_node(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_node();
  public:
  int32_t node(int index) const;
  void set_node(int index, int32_t value);
  void add_node(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      node() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_node();

  // @@protoc_insertion_point(class_scope:programl.NodeIndexList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > node_;
    mutable std::atomic<int> _node_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_util_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ProgramGraphList

// .programl.Features context = 1;
inline bool ProgramGraphList::_internal_has_context() const {
  return this != internal_default_instance() && _impl_.context_ != nullptr;
}
inline bool ProgramGraphList::has_context() const {
  return _internal_has_context();
}
inline const ::programl::Features& ProgramGraphList::_internal_context() const {
  const ::programl::Features* p = _impl_.context_;
  return p != nullptr ? *p : reinterpret_cast<const ::programl::Features&>(
      ::programl::_Features_default_instance_);
}
inline const ::programl::Features& ProgramGraphList::context() const {
  // @@protoc_insertion_point(field_get:programl.ProgramGraphList.context)
  return _internal_context();
}
inline void ProgramGraphList::unsafe_arena_set_allocated_context(
    ::programl::Features* context) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.context_);
  }
  _impl_.context_ = context;
  if (context) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:programl.ProgramGraphList.context)
}
inline ::programl::Features* ProgramGraphList::release_context() {
  
  ::programl::Features* temp = _impl_.context_;
  _impl_.context_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::programl::Features* ProgramGraphList::unsafe_arena_release_context() {
  // @@protoc_insertion_point(field_release:programl.ProgramGraphList.context)
  
  ::programl::Features* temp = _impl_.context_;
  _impl_.context_ = nullptr;
  return temp;
}
inline ::programl::Features* ProgramGraphList::_internal_mutable_context() {
  
  if (_impl_.context_ == nullptr) {
    auto* p = CreateMaybeMessage<::programl::Features>(GetArenaForAllocation());
    _impl_.context_ = p;
  }
  return _impl_.context_;
}
inline ::programl::Features* ProgramGraphList::mutable_context() {
  ::programl::Features* _msg = _internal_mutable_context();
  // @@protoc_insertion_point(field_mutable:programl.ProgramGraphList.context)
  return _msg;
}
inline void ProgramGraphList::set_allocated_context(::programl::Features* context) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.context_);
  }
  if (context) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(context));
    if (message_arena != submessage_arena) {
      context = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, context, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.context_ = context;
  // @@protoc_insertion_point(field_set_allocated:programl.ProgramGraphList.context)
}

// repeated .programl.ProgramGraph graph = 2;
inline int ProgramGraphList::_internal_graph_size() const {
  return _impl_.graph_.size();
}
inline int ProgramGraphList::graph_size() const {
  return _internal_graph_size();
}
inline ::programl::ProgramGraph* ProgramGraphList::mutable_graph(int index) {
  // @@protoc_insertion_point(field_mutable:programl.ProgramGraphList.graph)
  return _impl_.graph_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::programl::ProgramGraph >*
ProgramGraphList::mutable_graph() {
  // @@protoc_insertion_point(field_mutable_list:programl.ProgramGraphList.graph)
  return &_impl_.graph_;
}
inline const ::programl::ProgramGraph& ProgramGraphList::_internal_graph(int index) const {
  return _impl_.graph_.Get(index);
}
inline const ::programl::ProgramGraph& ProgramGraphList::graph(int index) const {
  // @@protoc_insertion_point(field_get:programl.ProgramGraphList.graph)
  return _internal_graph(index);
}
inline ::programl::ProgramGraph* ProgramGraphList::_internal_add_graph() {
  return _impl_.graph_.Add();
}
inline ::programl::ProgramGraph* ProgramGraphList::add_graph() {
  ::programl::ProgramGraph* _add = _internal_add_graph();
  // @@protoc_insertion_point(field_add:programl.ProgramGraphList.graph)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::programl::ProgramGraph >&
ProgramGraphList::graph() const {
  // @@protoc_insertion_point(field_list:programl.ProgramGraphList.graph)
  return _impl_.graph_;
}

// -------------------------------------------------------------------

// ProgramGraphOptions

// bool strict = 3;
inline void ProgramGraphOptions::clear_strict() {
  _impl_.strict_ = false;
}
inline bool ProgramGraphOptions::_internal_strict() const {
  return _impl_.strict_;
}
inline bool ProgramGraphOptions::strict() const {
  // @@protoc_insertion_point(field_get:programl.ProgramGraphOptions.strict)
  return _internal_strict();
}
inline void ProgramGraphOptions::_internal_set_strict(bool value) {
  
  _impl_.strict_ = value;
}
inline void ProgramGraphOptions::set_strict(bool value) {
  _internal_set_strict(value);
  // @@protoc_insertion_point(field_set:programl.ProgramGraphOptions.strict)
}

// bool instructions_only = 1;
inline void ProgramGraphOptions::clear_instructions_only() {
  _impl_.instructions_only_ = false;
}
inline bool ProgramGraphOptions::_internal_instructions_only() const {
  return _impl_.instructions_only_;
}
inline bool ProgramGraphOptions::instructions_only() const {
  // @@protoc_insertion_point(field_get:programl.ProgramGraphOptions.instructions_only)
  return _internal_instructions_only();
}
inline void ProgramGraphOptions::_internal_set_instructions_only(bool value) {
  
  _impl_.instructions_only_ = value;
}
inline void ProgramGraphOptions::set_instructions_only(bool value) {
  _internal_set_instructions_only(value);
  // @@protoc_insertion_point(field_set:programl.ProgramGraphOptions.instructions_only)
}

// bool ignore_call_returns = 2;
inline void ProgramGraphOptions::clear_ignore_call_returns() {
  _impl_.ignore_call_returns_ = false;
}
inline bool ProgramGraphOptions::_internal_ignore_call_returns() const {
  return _impl_.ignore_call_returns_;
}
inline bool ProgramGraphOptions::ignore_call_returns() const {
  // @@protoc_insertion_point(field_get:programl.ProgramGraphOptions.ignore_call_returns)
  return _internal_ignore_call_returns();
}
inline void ProgramGraphOptions::_internal_set_ignore_call_returns(bool value) {
  
  _impl_.ignore_call_returns_ = value;
}
inline void ProgramGraphOptions::set_ignore_call_returns(bool value) {
  _internal_set_ignore_call_returns(value);
  // @@protoc_insertion_point(field_set:programl.ProgramGraphOptions.ignore_call_returns)
}

// int32 opt_level = 4;
inline void ProgramGraphOptions::clear_opt_level() {
  _impl_.opt_level_ = 0;
}
inline int32_t ProgramGraphOptions::_internal_opt_level() const {
  return _impl_.opt_level_;
}
inline int32_t ProgramGraphOptions::opt_level() const {
  // @@protoc_insertion_point(field_get:programl.ProgramGraphOptions.opt_level)
  return _internal_opt_level();
}
inline void ProgramGraphOptions::_internal_set_opt_level(int32_t value) {
  
  _impl_.opt_level_ = value;
}
inline void ProgramGraphOptions::set_opt_level(int32_t value) {
  _internal_set_opt_level(value);
  // @@protoc_insertion_point(field_set:programl.ProgramGraphOptions.opt_level)
}

// string ir_path = 10;
inline void ProgramGraphOptions::clear_ir_path() {
  _impl_.ir_path_.ClearToEmpty();
}
inline const std::string& ProgramGraphOptions::ir_path() const {
  // @@protoc_insertion_point(field_get:programl.ProgramGraphOptions.ir_path)
  return _internal_ir_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProgramGraphOptions::set_ir_path(ArgT0&& arg0, ArgT... args) {
 
 _impl_.ir_path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:programl.ProgramGraphOptions.ir_path)
}
inline std::string* ProgramGraphOptions::mutable_ir_path() {
  std::string* _s = _internal_mutable_ir_path();
  // @@protoc_insertion_point(field_mutable:programl.ProgramGraphOptions.ir_path)
  return _s;
}
inline const std::string& ProgramGraphOptions::_internal_ir_path() const {
  return _impl_.ir_path_.Get();
}
inline void ProgramGraphOptions::_internal_set_ir_path(const std::string& value) {
  
  _impl_.ir_path_.Set(value, GetArenaForAllocation());
}
inline std::string* ProgramGraphOptions::_internal_mutable_ir_path() {
  
  return _impl_.ir_path_.Mutable(GetArenaForAllocation());
}
inline std::string* ProgramGraphOptions::release_ir_path() {
  // @@protoc_insertion_point(field_release:programl.ProgramGraphOptions.ir_path)
  return _impl_.ir_path_.Release();
}
inline void ProgramGraphOptions::set_allocated_ir_path(std::string* ir_path) {
  if (ir_path != nullptr) {
    
  } else {
    
  }
  _impl_.ir_path_.SetAllocated(ir_path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ir_path_.IsDefault()) {
    _impl_.ir_path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:programl.ProgramGraphOptions.ir_path)
}

// -------------------------------------------------------------------

// ProgramGraphFeatures

// .programl.FeatureLists node_features = 1;
inline bool ProgramGraphFeatures::_internal_has_node_features() const {
  return this != internal_default_instance() && _impl_.node_features_ != nullptr;
}
inline bool ProgramGraphFeatures::has_node_features() const {
  return _internal_has_node_features();
}
inline const ::programl::FeatureLists& ProgramGraphFeatures::_internal_node_features() const {
  const ::programl::FeatureLists* p = _impl_.node_features_;
  return p != nullptr ? *p : reinterpret_cast<const ::programl::FeatureLists&>(
      ::programl::_FeatureLists_default_instance_);
}
inline const ::programl::FeatureLists& ProgramGraphFeatures::node_features() const {
  // @@protoc_insertion_point(field_get:programl.ProgramGraphFeatures.node_features)
  return _internal_node_features();
}
inline void ProgramGraphFeatures::unsafe_arena_set_allocated_node_features(
    ::programl::FeatureLists* node_features) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.node_features_);
  }
  _impl_.node_features_ = node_features;
  if (node_features) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:programl.ProgramGraphFeatures.node_features)
}
inline ::programl::FeatureLists* ProgramGraphFeatures::release_node_features() {
  
  ::programl::FeatureLists* temp = _impl_.node_features_;
  _impl_.node_features_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::programl::FeatureLists* ProgramGraphFeatures::unsafe_arena_release_node_features() {
  // @@protoc_insertion_point(field_release:programl.ProgramGraphFeatures.node_features)
  
  ::programl::FeatureLists* temp = _impl_.node_features_;
  _impl_.node_features_ = nullptr;
  return temp;
}
inline ::programl::FeatureLists* ProgramGraphFeatures::_internal_mutable_node_features() {
  
  if (_impl_.node_features_ == nullptr) {
    auto* p = CreateMaybeMessage<::programl::FeatureLists>(GetArenaForAllocation());
    _impl_.node_features_ = p;
  }
  return _impl_.node_features_;
}
inline ::programl::FeatureLists* ProgramGraphFeatures::mutable_node_features() {
  ::programl::FeatureLists* _msg = _internal_mutable_node_features();
  // @@protoc_insertion_point(field_mutable:programl.ProgramGraphFeatures.node_features)
  return _msg;
}
inline void ProgramGraphFeatures::set_allocated_node_features(::programl::FeatureLists* node_features) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.node_features_);
  }
  if (node_features) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(node_features));
    if (message_arena != submessage_arena) {
      node_features = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, node_features, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.node_features_ = node_features;
  // @@protoc_insertion_point(field_set_allocated:programl.ProgramGraphFeatures.node_features)
}

// .programl.FeatureLists edge_features = 2;
inline bool ProgramGraphFeatures::_internal_has_edge_features() const {
  return this != internal_default_instance() && _impl_.edge_features_ != nullptr;
}
inline bool ProgramGraphFeatures::has_edge_features() const {
  return _internal_has_edge_features();
}
inline const ::programl::FeatureLists& ProgramGraphFeatures::_internal_edge_features() const {
  const ::programl::FeatureLists* p = _impl_.edge_features_;
  return p != nullptr ? *p : reinterpret_cast<const ::programl::FeatureLists&>(
      ::programl::_FeatureLists_default_instance_);
}
inline const ::programl::FeatureLists& ProgramGraphFeatures::edge_features() const {
  // @@protoc_insertion_point(field_get:programl.ProgramGraphFeatures.edge_features)
  return _internal_edge_features();
}
inline void ProgramGraphFeatures::unsafe_arena_set_allocated_edge_features(
    ::programl::FeatureLists* edge_features) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.edge_features_);
  }
  _impl_.edge_features_ = edge_features;
  if (edge_features) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:programl.ProgramGraphFeatures.edge_features)
}
inline ::programl::FeatureLists* ProgramGraphFeatures::release_edge_features() {
  
  ::programl::FeatureLists* temp = _impl_.edge_features_;
  _impl_.edge_features_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::programl::FeatureLists* ProgramGraphFeatures::unsafe_arena_release_edge_features() {
  // @@protoc_insertion_point(field_release:programl.ProgramGraphFeatures.edge_features)
  
  ::programl::FeatureLists* temp = _impl_.edge_features_;
  _impl_.edge_features_ = nullptr;
  return temp;
}
inline ::programl::FeatureLists* ProgramGraphFeatures::_internal_mutable_edge_features() {
  
  if (_impl_.edge_features_ == nullptr) {
    auto* p = CreateMaybeMessage<::programl::FeatureLists>(GetArenaForAllocation());
    _impl_.edge_features_ = p;
  }
  return _impl_.edge_features_;
}
inline ::programl::FeatureLists* ProgramGraphFeatures::mutable_edge_features() {
  ::programl::FeatureLists* _msg = _internal_mutable_edge_features();
  // @@protoc_insertion_point(field_mutable:programl.ProgramGraphFeatures.edge_features)
  return _msg;
}
inline void ProgramGraphFeatures::set_allocated_edge_features(::programl::FeatureLists* edge_features) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.edge_features_);
  }
  if (edge_features) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(edge_features));
    if (message_arena != submessage_arena) {
      edge_features = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, edge_features, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.edge_features_ = edge_features;
  // @@protoc_insertion_point(field_set_allocated:programl.ProgramGraphFeatures.edge_features)
}

// .programl.FeatureLists function_features = 3;
inline bool ProgramGraphFeatures::_internal_has_function_features() const {
  return this != internal_default_instance() && _impl_.function_features_ != nullptr;
}
inline bool ProgramGraphFeatures::has_function_features() const {
  return _internal_has_function_features();
}
inline const ::programl::FeatureLists& ProgramGraphFeatures::_internal_function_features() const {
  const ::programl::FeatureLists* p = _impl_.function_features_;
  return p != nullptr ? *p : reinterpret_cast<const ::programl::FeatureLists&>(
      ::programl::_FeatureLists_default_instance_);
}
inline const ::programl::FeatureLists& ProgramGraphFeatures::function_features() const {
  // @@protoc_insertion_point(field_get:programl.ProgramGraphFeatures.function_features)
  return _internal_function_features();
}
inline void ProgramGraphFeatures::unsafe_arena_set_allocated_function_features(
    ::programl::FeatureLists* function_features) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.function_features_);
  }
  _impl_.function_features_ = function_features;
  if (function_features) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:programl.ProgramGraphFeatures.function_features)
}
inline ::programl::FeatureLists* ProgramGraphFeatures::release_function_features() {
  
  ::programl::FeatureLists* temp = _impl_.function_features_;
  _impl_.function_features_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::programl::FeatureLists* ProgramGraphFeatures::unsafe_arena_release_function_features() {
  // @@protoc_insertion_point(field_release:programl.ProgramGraphFeatures.function_features)
  
  ::programl::FeatureLists* temp = _impl_.function_features_;
  _impl_.function_features_ = nullptr;
  return temp;
}
inline ::programl::FeatureLists* ProgramGraphFeatures::_internal_mutable_function_features() {
  
  if (_impl_.function_features_ == nullptr) {
    auto* p = CreateMaybeMessage<::programl::FeatureLists>(GetArenaForAllocation());
    _impl_.function_features_ = p;
  }
  return _impl_.function_features_;
}
inline ::programl::FeatureLists* ProgramGraphFeatures::mutable_function_features() {
  ::programl::FeatureLists* _msg = _internal_mutable_function_features();
  // @@protoc_insertion_point(field_mutable:programl.ProgramGraphFeatures.function_features)
  return _msg;
}
inline void ProgramGraphFeatures::set_allocated_function_features(::programl::FeatureLists* function_features) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.function_features_);
  }
  if (function_features) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(function_features));
    if (message_arena != submessage_arena) {
      function_features = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, function_features, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.function_features_ = function_features;
  // @@protoc_insertion_point(field_set_allocated:programl.ProgramGraphFeatures.function_features)
}

// .programl.FeatureLists module_features = 4;
inline bool ProgramGraphFeatures::_internal_has_module_features() const {
  return this != internal_default_instance() && _impl_.module_features_ != nullptr;
}
inline bool ProgramGraphFeatures::has_module_features() const {
  return _internal_has_module_features();
}
inline const ::programl::FeatureLists& ProgramGraphFeatures::_internal_module_features() const {
  const ::programl::FeatureLists* p = _impl_.module_features_;
  return p != nullptr ? *p : reinterpret_cast<const ::programl::FeatureLists&>(
      ::programl::_FeatureLists_default_instance_);
}
inline const ::programl::FeatureLists& ProgramGraphFeatures::module_features() const {
  // @@protoc_insertion_point(field_get:programl.ProgramGraphFeatures.module_features)
  return _internal_module_features();
}
inline void ProgramGraphFeatures::unsafe_arena_set_allocated_module_features(
    ::programl::FeatureLists* module_features) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.module_features_);
  }
  _impl_.module_features_ = module_features;
  if (module_features) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:programl.ProgramGraphFeatures.module_features)
}
inline ::programl::FeatureLists* ProgramGraphFeatures::release_module_features() {
  
  ::programl::FeatureLists* temp = _impl_.module_features_;
  _impl_.module_features_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::programl::FeatureLists* ProgramGraphFeatures::unsafe_arena_release_module_features() {
  // @@protoc_insertion_point(field_release:programl.ProgramGraphFeatures.module_features)
  
  ::programl::FeatureLists* temp = _impl_.module_features_;
  _impl_.module_features_ = nullptr;
  return temp;
}
inline ::programl::FeatureLists* ProgramGraphFeatures::_internal_mutable_module_features() {
  
  if (_impl_.module_features_ == nullptr) {
    auto* p = CreateMaybeMessage<::programl::FeatureLists>(GetArenaForAllocation());
    _impl_.module_features_ = p;
  }
  return _impl_.module_features_;
}
inline ::programl::FeatureLists* ProgramGraphFeatures::mutable_module_features() {
  ::programl::FeatureLists* _msg = _internal_mutable_module_features();
  // @@protoc_insertion_point(field_mutable:programl.ProgramGraphFeatures.module_features)
  return _msg;
}
inline void ProgramGraphFeatures::set_allocated_module_features(::programl::FeatureLists* module_features) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.module_features_);
  }
  if (module_features) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(module_features));
    if (message_arena != submessage_arena) {
      module_features = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, module_features, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.module_features_ = module_features;
  // @@protoc_insertion_point(field_set_allocated:programl.ProgramGraphFeatures.module_features)
}

// .programl.Features features = 5;
inline bool ProgramGraphFeatures::_internal_has_features() const {
  return this != internal_default_instance() && _impl_.features_ != nullptr;
}
inline bool ProgramGraphFeatures::has_features() const {
  return _internal_has_features();
}
inline const ::programl::Features& ProgramGraphFeatures::_internal_features() const {
  const ::programl::Features* p = _impl_.features_;
  return p != nullptr ? *p : reinterpret_cast<const ::programl::Features&>(
      ::programl::_Features_default_instance_);
}
inline const ::programl::Features& ProgramGraphFeatures::features() const {
  // @@protoc_insertion_point(field_get:programl.ProgramGraphFeatures.features)
  return _internal_features();
}
inline void ProgramGraphFeatures::unsafe_arena_set_allocated_features(
    ::programl::Features* features) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.features_);
  }
  _impl_.features_ = features;
  if (features) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:programl.ProgramGraphFeatures.features)
}
inline ::programl::Features* ProgramGraphFeatures::release_features() {
  
  ::programl::Features* temp = _impl_.features_;
  _impl_.features_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::programl::Features* ProgramGraphFeatures::unsafe_arena_release_features() {
  // @@protoc_insertion_point(field_release:programl.ProgramGraphFeatures.features)
  
  ::programl::Features* temp = _impl_.features_;
  _impl_.features_ = nullptr;
  return temp;
}
inline ::programl::Features* ProgramGraphFeatures::_internal_mutable_features() {
  
  if (_impl_.features_ == nullptr) {
    auto* p = CreateMaybeMessage<::programl::Features>(GetArenaForAllocation());
    _impl_.features_ = p;
  }
  return _impl_.features_;
}
inline ::programl::Features* ProgramGraphFeatures::mutable_features() {
  ::programl::Features* _msg = _internal_mutable_features();
  // @@protoc_insertion_point(field_mutable:programl.ProgramGraphFeatures.features)
  return _msg;
}
inline void ProgramGraphFeatures::set_allocated_features(::programl::Features* features) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.features_);
  }
  if (features) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(features));
    if (message_arena != submessage_arena) {
      features = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, features, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.features_ = features;
  // @@protoc_insertion_point(field_set_allocated:programl.ProgramGraphFeatures.features)
}

// -------------------------------------------------------------------

// ProgramGraphFeaturesList

// .programl.Features context = 1;
inline bool ProgramGraphFeaturesList::_internal_has_context() const {
  return this != internal_default_instance() && _impl_.context_ != nullptr;
}
inline bool ProgramGraphFeaturesList::has_context() const {
  return _internal_has_context();
}
inline const ::programl::Features& ProgramGraphFeaturesList::_internal_context() const {
  const ::programl::Features* p = _impl_.context_;
  return p != nullptr ? *p : reinterpret_cast<const ::programl::Features&>(
      ::programl::_Features_default_instance_);
}
inline const ::programl::Features& ProgramGraphFeaturesList::context() const {
  // @@protoc_insertion_point(field_get:programl.ProgramGraphFeaturesList.context)
  return _internal_context();
}
inline void ProgramGraphFeaturesList::unsafe_arena_set_allocated_context(
    ::programl::Features* context) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.context_);
  }
  _impl_.context_ = context;
  if (context) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:programl.ProgramGraphFeaturesList.context)
}
inline ::programl::Features* ProgramGraphFeaturesList::release_context() {
  
  ::programl::Features* temp = _impl_.context_;
  _impl_.context_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::programl::Features* ProgramGraphFeaturesList::unsafe_arena_release_context() {
  // @@protoc_insertion_point(field_release:programl.ProgramGraphFeaturesList.context)
  
  ::programl::Features* temp = _impl_.context_;
  _impl_.context_ = nullptr;
  return temp;
}
inline ::programl::Features* ProgramGraphFeaturesList::_internal_mutable_context() {
  
  if (_impl_.context_ == nullptr) {
    auto* p = CreateMaybeMessage<::programl::Features>(GetArenaForAllocation());
    _impl_.context_ = p;
  }
  return _impl_.context_;
}
inline ::programl::Features* ProgramGraphFeaturesList::mutable_context() {
  ::programl::Features* _msg = _internal_mutable_context();
  // @@protoc_insertion_point(field_mutable:programl.ProgramGraphFeaturesList.context)
  return _msg;
}
inline void ProgramGraphFeaturesList::set_allocated_context(::programl::Features* context) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.context_);
  }
  if (context) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(context));
    if (message_arena != submessage_arena) {
      context = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, context, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.context_ = context;
  // @@protoc_insertion_point(field_set_allocated:programl.ProgramGraphFeaturesList.context)
}

// repeated .programl.ProgramGraphFeatures graph = 2;
inline int ProgramGraphFeaturesList::_internal_graph_size() const {
  return _impl_.graph_.size();
}
inline int ProgramGraphFeaturesList::graph_size() const {
  return _internal_graph_size();
}
inline void ProgramGraphFeaturesList::clear_graph() {
  _impl_.graph_.Clear();
}
inline ::programl::ProgramGraphFeatures* ProgramGraphFeaturesList::mutable_graph(int index) {
  // @@protoc_insertion_point(field_mutable:programl.ProgramGraphFeaturesList.graph)
  return _impl_.graph_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::programl::ProgramGraphFeatures >*
ProgramGraphFeaturesList::mutable_graph() {
  // @@protoc_insertion_point(field_mutable_list:programl.ProgramGraphFeaturesList.graph)
  return &_impl_.graph_;
}
inline const ::programl::ProgramGraphFeatures& ProgramGraphFeaturesList::_internal_graph(int index) const {
  return _impl_.graph_.Get(index);
}
inline const ::programl::ProgramGraphFeatures& ProgramGraphFeaturesList::graph(int index) const {
  // @@protoc_insertion_point(field_get:programl.ProgramGraphFeaturesList.graph)
  return _internal_graph(index);
}
inline ::programl::ProgramGraphFeatures* ProgramGraphFeaturesList::_internal_add_graph() {
  return _impl_.graph_.Add();
}
inline ::programl::ProgramGraphFeatures* ProgramGraphFeaturesList::add_graph() {
  ::programl::ProgramGraphFeatures* _add = _internal_add_graph();
  // @@protoc_insertion_point(field_add:programl.ProgramGraphFeaturesList.graph)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::programl::ProgramGraphFeatures >&
ProgramGraphFeaturesList::graph() const {
  // @@protoc_insertion_point(field_list:programl.ProgramGraphFeaturesList.graph)
  return _impl_.graph_;
}

// -------------------------------------------------------------------

// Ir

// .programl.Ir.Type type = 1;
inline void Ir::clear_type() {
  _impl_.type_ = 0;
}
inline ::programl::Ir_Type Ir::_internal_type() const {
  return static_cast< ::programl::Ir_Type >(_impl_.type_);
}
inline ::programl::Ir_Type Ir::type() const {
  // @@protoc_insertion_point(field_get:programl.Ir.type)
  return _internal_type();
}
inline void Ir::_internal_set_type(::programl::Ir_Type value) {
  
  _impl_.type_ = value;
}
inline void Ir::set_type(::programl::Ir_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:programl.Ir.type)
}

// int64 compiler_version = 2;
inline void Ir::clear_compiler_version() {
  _impl_.compiler_version_ = int64_t{0};
}
inline int64_t Ir::_internal_compiler_version() const {
  return _impl_.compiler_version_;
}
inline int64_t Ir::compiler_version() const {
  // @@protoc_insertion_point(field_get:programl.Ir.compiler_version)
  return _internal_compiler_version();
}
inline void Ir::_internal_set_compiler_version(int64_t value) {
  
  _impl_.compiler_version_ = value;
}
inline void Ir::set_compiler_version(int64_t value) {
  _internal_set_compiler_version(value);
  // @@protoc_insertion_point(field_set:programl.Ir.compiler_version)
}

// string cmd = 3;
inline void Ir::clear_cmd() {
  _impl_.cmd_.ClearToEmpty();
}
inline const std::string& Ir::cmd() const {
  // @@protoc_insertion_point(field_get:programl.Ir.cmd)
  return _internal_cmd();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Ir::set_cmd(ArgT0&& arg0, ArgT... args) {
 
 _impl_.cmd_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:programl.Ir.cmd)
}
inline std::string* Ir::mutable_cmd() {
  std::string* _s = _internal_mutable_cmd();
  // @@protoc_insertion_point(field_mutable:programl.Ir.cmd)
  return _s;
}
inline const std::string& Ir::_internal_cmd() const {
  return _impl_.cmd_.Get();
}
inline void Ir::_internal_set_cmd(const std::string& value) {
  
  _impl_.cmd_.Set(value, GetArenaForAllocation());
}
inline std::string* Ir::_internal_mutable_cmd() {
  
  return _impl_.cmd_.Mutable(GetArenaForAllocation());
}
inline std::string* Ir::release_cmd() {
  // @@protoc_insertion_point(field_release:programl.Ir.cmd)
  return _impl_.cmd_.Release();
}
inline void Ir::set_allocated_cmd(std::string* cmd) {
  if (cmd != nullptr) {
    
  } else {
    
  }
  _impl_.cmd_.SetAllocated(cmd, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.cmd_.IsDefault()) {
    _impl_.cmd_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:programl.Ir.cmd)
}

// string text = 4;
inline void Ir::clear_text() {
  _impl_.text_.ClearToEmpty();
}
inline const std::string& Ir::text() const {
  // @@protoc_insertion_point(field_get:programl.Ir.text)
  return _internal_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Ir::set_text(ArgT0&& arg0, ArgT... args) {
 
 _impl_.text_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:programl.Ir.text)
}
inline std::string* Ir::mutable_text() {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:programl.Ir.text)
  return _s;
}
inline const std::string& Ir::_internal_text() const {
  return _impl_.text_.Get();
}
inline void Ir::_internal_set_text(const std::string& value) {
  
  _impl_.text_.Set(value, GetArenaForAllocation());
}
inline std::string* Ir::_internal_mutable_text() {
  
  return _impl_.text_.Mutable(GetArenaForAllocation());
}
inline std::string* Ir::release_text() {
  // @@protoc_insertion_point(field_release:programl.Ir.text)
  return _impl_.text_.Release();
}
inline void Ir::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  _impl_.text_.SetAllocated(text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.text_.IsDefault()) {
    _impl_.text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:programl.Ir.text)
}

// -------------------------------------------------------------------

// IrList

// repeated .programl.Ir ir = 1;
inline int IrList::_internal_ir_size() const {
  return _impl_.ir_.size();
}
inline int IrList::ir_size() const {
  return _internal_ir_size();
}
inline void IrList::clear_ir() {
  _impl_.ir_.Clear();
}
inline ::programl::Ir* IrList::mutable_ir(int index) {
  // @@protoc_insertion_point(field_mutable:programl.IrList.ir)
  return _impl_.ir_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::programl::Ir >*
IrList::mutable_ir() {
  // @@protoc_insertion_point(field_mutable_list:programl.IrList.ir)
  return &_impl_.ir_;
}
inline const ::programl::Ir& IrList::_internal_ir(int index) const {
  return _impl_.ir_.Get(index);
}
inline const ::programl::Ir& IrList::ir(int index) const {
  // @@protoc_insertion_point(field_get:programl.IrList.ir)
  return _internal_ir(index);
}
inline ::programl::Ir* IrList::_internal_add_ir() {
  return _impl_.ir_.Add();
}
inline ::programl::Ir* IrList::add_ir() {
  ::programl::Ir* _add = _internal_add_ir();
  // @@protoc_insertion_point(field_add:programl.IrList.ir)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::programl::Ir >&
IrList::ir() const {
  // @@protoc_insertion_point(field_list:programl.IrList.ir)
  return _impl_.ir_;
}

// -------------------------------------------------------------------

// SourceFile

// .programl.SourceFile.Language language = 2;
inline void SourceFile::clear_language() {
  _impl_.language_ = 0;
}
inline ::programl::SourceFile_Language SourceFile::_internal_language() const {
  return static_cast< ::programl::SourceFile_Language >(_impl_.language_);
}
inline ::programl::SourceFile_Language SourceFile::language() const {
  // @@protoc_insertion_point(field_get:programl.SourceFile.language)
  return _internal_language();
}
inline void SourceFile::_internal_set_language(::programl::SourceFile_Language value) {
  
  _impl_.language_ = value;
}
inline void SourceFile::set_language(::programl::SourceFile_Language value) {
  _internal_set_language(value);
  // @@protoc_insertion_point(field_set:programl.SourceFile.language)
}

// string relpath = 1;
inline void SourceFile::clear_relpath() {
  _impl_.relpath_.ClearToEmpty();
}
inline const std::string& SourceFile::relpath() const {
  // @@protoc_insertion_point(field_get:programl.SourceFile.relpath)
  return _internal_relpath();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SourceFile::set_relpath(ArgT0&& arg0, ArgT... args) {
 
 _impl_.relpath_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:programl.SourceFile.relpath)
}
inline std::string* SourceFile::mutable_relpath() {
  std::string* _s = _internal_mutable_relpath();
  // @@protoc_insertion_point(field_mutable:programl.SourceFile.relpath)
  return _s;
}
inline const std::string& SourceFile::_internal_relpath() const {
  return _impl_.relpath_.Get();
}
inline void SourceFile::_internal_set_relpath(const std::string& value) {
  
  _impl_.relpath_.Set(value, GetArenaForAllocation());
}
inline std::string* SourceFile::_internal_mutable_relpath() {
  
  return _impl_.relpath_.Mutable(GetArenaForAllocation());
}
inline std::string* SourceFile::release_relpath() {
  // @@protoc_insertion_point(field_release:programl.SourceFile.relpath)
  return _impl_.relpath_.Release();
}
inline void SourceFile::set_allocated_relpath(std::string* relpath) {
  if (relpath != nullptr) {
    
  } else {
    
  }
  _impl_.relpath_.SetAllocated(relpath, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.relpath_.IsDefault()) {
    _impl_.relpath_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:programl.SourceFile.relpath)
}

// string text = 3;
inline void SourceFile::clear_text() {
  _impl_.text_.ClearToEmpty();
}
inline const std::string& SourceFile::text() const {
  // @@protoc_insertion_point(field_get:programl.SourceFile.text)
  return _internal_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SourceFile::set_text(ArgT0&& arg0, ArgT... args) {
 
 _impl_.text_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:programl.SourceFile.text)
}
inline std::string* SourceFile::mutable_text() {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:programl.SourceFile.text)
  return _s;
}
inline const std::string& SourceFile::_internal_text() const {
  return _impl_.text_.Get();
}
inline void SourceFile::_internal_set_text(const std::string& value) {
  
  _impl_.text_.Set(value, GetArenaForAllocation());
}
inline std::string* SourceFile::_internal_mutable_text() {
  
  return _impl_.text_.Mutable(GetArenaForAllocation());
}
inline std::string* SourceFile::release_text() {
  // @@protoc_insertion_point(field_release:programl.SourceFile.text)
  return _impl_.text_.Release();
}
inline void SourceFile::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  _impl_.text_.SetAllocated(text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.text_.IsDefault()) {
    _impl_.text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:programl.SourceFile.text)
}

// -------------------------------------------------------------------

// Repo

// string url = 1;
inline void Repo::clear_url() {
  _impl_.url_.ClearToEmpty();
}
inline const std::string& Repo::url() const {
  // @@protoc_insertion_point(field_get:programl.Repo.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Repo::set_url(ArgT0&& arg0, ArgT... args) {
 
 _impl_.url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:programl.Repo.url)
}
inline std::string* Repo::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:programl.Repo.url)
  return _s;
}
inline const std::string& Repo::_internal_url() const {
  return _impl_.url_.Get();
}
inline void Repo::_internal_set_url(const std::string& value) {
  
  _impl_.url_.Set(value, GetArenaForAllocation());
}
inline std::string* Repo::_internal_mutable_url() {
  
  return _impl_.url_.Mutable(GetArenaForAllocation());
}
inline std::string* Repo::release_url() {
  // @@protoc_insertion_point(field_release:programl.Repo.url)
  return _impl_.url_.Release();
}
inline void Repo::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  _impl_.url_.SetAllocated(url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.url_.IsDefault()) {
    _impl_.url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:programl.Repo.url)
}

// string sha1 = 2;
inline void Repo::clear_sha1() {
  _impl_.sha1_.ClearToEmpty();
}
inline const std::string& Repo::sha1() const {
  // @@protoc_insertion_point(field_get:programl.Repo.sha1)
  return _internal_sha1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Repo::set_sha1(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sha1_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:programl.Repo.sha1)
}
inline std::string* Repo::mutable_sha1() {
  std::string* _s = _internal_mutable_sha1();
  // @@protoc_insertion_point(field_mutable:programl.Repo.sha1)
  return _s;
}
inline const std::string& Repo::_internal_sha1() const {
  return _impl_.sha1_.Get();
}
inline void Repo::_internal_set_sha1(const std::string& value) {
  
  _impl_.sha1_.Set(value, GetArenaForAllocation());
}
inline std::string* Repo::_internal_mutable_sha1() {
  
  return _impl_.sha1_.Mutable(GetArenaForAllocation());
}
inline std::string* Repo::release_sha1() {
  // @@protoc_insertion_point(field_release:programl.Repo.sha1)
  return _impl_.sha1_.Release();
}
inline void Repo::set_allocated_sha1(std::string* sha1) {
  if (sha1 != nullptr) {
    
  } else {
    
  }
  _impl_.sha1_.SetAllocated(sha1, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sha1_.IsDefault()) {
    _impl_.sha1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:programl.Repo.sha1)
}

// int64 created_ms_timestamp = 3;
inline void Repo::clear_created_ms_timestamp() {
  _impl_.created_ms_timestamp_ = int64_t{0};
}
inline int64_t Repo::_internal_created_ms_timestamp() const {
  return _impl_.created_ms_timestamp_;
}
inline int64_t Repo::created_ms_timestamp() const {
  // @@protoc_insertion_point(field_get:programl.Repo.created_ms_timestamp)
  return _internal_created_ms_timestamp();
}
inline void Repo::_internal_set_created_ms_timestamp(int64_t value) {
  
  _impl_.created_ms_timestamp_ = value;
}
inline void Repo::set_created_ms_timestamp(int64_t value) {
  _internal_set_created_ms_timestamp(value);
  // @@protoc_insertion_point(field_set:programl.Repo.created_ms_timestamp)
}

// -------------------------------------------------------------------

// NodeIndexList

// repeated int32 node = 1;
inline int NodeIndexList::_internal_node_size() const {
  return _impl_.node_.size();
}
inline int NodeIndexList::node_size() const {
  return _internal_node_size();
}
inline void NodeIndexList::clear_node() {
  _impl_.node_.Clear();
}
inline int32_t NodeIndexList::_internal_node(int index) const {
  return _impl_.node_.Get(index);
}
inline int32_t NodeIndexList::node(int index) const {
  // @@protoc_insertion_point(field_get:programl.NodeIndexList.node)
  return _internal_node(index);
}
inline void NodeIndexList::set_node(int index, int32_t value) {
  _impl_.node_.Set(index, value);
  // @@protoc_insertion_point(field_set:programl.NodeIndexList.node)
}
inline void NodeIndexList::_internal_add_node(int32_t value) {
  _impl_.node_.Add(value);
}
inline void NodeIndexList::add_node(int32_t value) {
  _internal_add_node(value);
  // @@protoc_insertion_point(field_add:programl.NodeIndexList.node)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
NodeIndexList::_internal_node() const {
  return _impl_.node_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
NodeIndexList::node() const {
  // @@protoc_insertion_point(field_list:programl.NodeIndexList.node)
  return _internal_node();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
NodeIndexList::_internal_mutable_node() {
  return &_impl_.node_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
NodeIndexList::mutable_node() {
  // @@protoc_insertion_point(field_mutable_list:programl.NodeIndexList.node)
  return _internal_mutable_node();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace programl

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::programl::Ir_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::programl::Ir_Type>() {
  return ::programl::Ir_Type_descriptor();
}
template <> struct is_proto_enum< ::programl::SourceFile_Language> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::programl::SourceFile_Language>() {
  return ::programl::SourceFile_Language_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_util_2eproto
